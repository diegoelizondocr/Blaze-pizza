@page "/checkout"
@inject HttpClient HttpClient
@inject OrderState OrderState
@inject IUriHelper UriHelper
@inject IJSRuntime JSRuntime

<div class="main">
    <AuthorizeView>
        <NotAuthorized>
            <h2>Signing in...</h2>
        </NotAuthorized>
        <Authorized>
            <h2>Checkout</h2>

            <div class="checkout-order-details">
                <OrderReview Order="@OrderState.Order" />
            </div>

            <button class="checkout-button btn btn-warning" @onclick="@SubmitOrder" disabled="@isSubmitting">
                Place order
            </button>
        </Authorized>
    </AuthorizeView>
</div>

@functions {
    bool isSubmitting;
    [CascadingParameter] Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnInitAsync()
    {
        var authState = await AuthenticationStateTask;
        if (!authState.User.Identity.IsAuthenticated)
        {
            // The server won't accept orders from unauthenticated users, so avoid
            // an error by making them log in at this point
            await LocalStorage.SetAsync(JSRuntime, "currentorder", OrderState.Order);
            UriHelper.NavigateTo("user/signin?redirectUri=/checkout", true);
        }

        if (!OrderState.Order.Pizzas.Any())
        {
            var savedOrder = await LocalStorage.GetAsync<Order>(JSRuntime, "currentorder");
            if (savedOrder != null)
            {
                // Recover the temporary saved order
                OrderState.ReplaceOrder(savedOrder);
                await LocalStorage.DeleteAsync(JSRuntime, "currentorder");
            }
            else
            {
                // There's nothing check out - go to home
                UriHelper.NavigateTo("");
            }
        }
    }

    async Task SubmitOrder()
    {
        isSubmitting = true;
        var newOrderId = await HttpClient.PostJsonAsync<int>("orders", OrderState.Order);
        OrderState.ResetOrder();
        UriHelper.NavigateTo($"myorders/{newOrderId}");
    }
}
