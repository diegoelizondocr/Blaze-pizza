// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace BlazingPizza.Server.CompiledModels
{
    public partial class PizzaStoreContextModel
    {
        partial void Initialize()
        {
            var address = AddressEntityType.Create(this);
            var latLong = LatLongEntityType.Create(this);
            var notificationSubscription = NotificationSubscriptionEntityType.Create(this);
            var order = OrderEntityType.Create(this);
            var pizza = PizzaEntityType.Create(this);
            var pizzaSpecial = PizzaSpecialEntityType.Create(this);
            var pizzaTopping = PizzaToppingEntityType.Create(this);
            var pizzaStoreUser = PizzaStoreUserEntityType.Create(this);
            var topping = ToppingEntityType.Create(this);
            var deviceFlowCodes = DeviceFlowCodesEntityType.Create(this);
            var key = KeyEntityType.Create(this);
            var persistedGrant = PersistedGrantEntityType.Create(this);
            var identityRole = IdentityRoleEntityType.Create(this);
            var identityRoleClaim = IdentityRoleClaimEntityType.Create(this);
            var identityUserClaim = IdentityUserClaimEntityType.Create(this);
            var identityUserLogin = IdentityUserLoginEntityType.Create(this);
            var identityUserRole = IdentityUserRoleEntityType.Create(this);
            var identityUserToken = IdentityUserTokenEntityType.Create(this);

            LatLongEntityType.CreateForeignKey1(latLong, order);
            OrderEntityType.CreateForeignKey1(order, address);
            PizzaEntityType.CreateForeignKey1(pizza, order);
            PizzaEntityType.CreateForeignKey2(pizza, pizzaSpecial);
            PizzaToppingEntityType.CreateForeignKey1(pizzaTopping, pizza);
            PizzaToppingEntityType.CreateForeignKey2(pizzaTopping, topping);
            IdentityRoleClaimEntityType.CreateForeignKey1(identityRoleClaim, identityRole);
            IdentityUserClaimEntityType.CreateForeignKey1(identityUserClaim, pizzaStoreUser);
            IdentityUserLoginEntityType.CreateForeignKey1(identityUserLogin, pizzaStoreUser);
            IdentityUserRoleEntityType.CreateForeignKey1(identityUserRole, identityRole);
            IdentityUserRoleEntityType.CreateForeignKey2(identityUserRole, pizzaStoreUser);
            IdentityUserTokenEntityType.CreateForeignKey1(identityUserToken, pizzaStoreUser);

            AddressEntityType.CreateAnnotations(address);
            LatLongEntityType.CreateAnnotations(latLong);
            NotificationSubscriptionEntityType.CreateAnnotations(notificationSubscription);
            OrderEntityType.CreateAnnotations(order);
            PizzaEntityType.CreateAnnotations(pizza);
            PizzaSpecialEntityType.CreateAnnotations(pizzaSpecial);
            PizzaToppingEntityType.CreateAnnotations(pizzaTopping);
            PizzaStoreUserEntityType.CreateAnnotations(pizzaStoreUser);
            ToppingEntityType.CreateAnnotations(topping);
            DeviceFlowCodesEntityType.CreateAnnotations(deviceFlowCodes);
            KeyEntityType.CreateAnnotations(key);
            PersistedGrantEntityType.CreateAnnotations(persistedGrant);
            IdentityRoleEntityType.CreateAnnotations(identityRole);
            IdentityRoleClaimEntityType.CreateAnnotations(identityRoleClaim);
            IdentityUserClaimEntityType.CreateAnnotations(identityUserClaim);
            IdentityUserLoginEntityType.CreateAnnotations(identityUserLogin);
            IdentityUserRoleEntityType.CreateAnnotations(identityUserRole);
            IdentityUserTokenEntityType.CreateAnnotations(identityUserToken);

            AddAnnotation("ProductVersion", "8.0.0");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var address = FindEntityType("BlazingPizza.Address")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            address.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var blazingPizzaAddressTableBase = new TableBase("BlazingPizza.Address", null, relationalModel);
            var cityColumnBase = new ColumnBase<ColumnMappingBase>("City", "TEXT", blazingPizzaAddressTableBase);
            blazingPizzaAddressTableBase.Columns.Add("City", cityColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", blazingPizzaAddressTableBase);
            blazingPizzaAddressTableBase.Columns.Add("Id", idColumnBase);
            var line1ColumnBase = new ColumnBase<ColumnMappingBase>("Line1", "TEXT", blazingPizzaAddressTableBase);
            blazingPizzaAddressTableBase.Columns.Add("Line1", line1ColumnBase);
            var line2ColumnBase = new ColumnBase<ColumnMappingBase>("Line2", "TEXT", blazingPizzaAddressTableBase);
            blazingPizzaAddressTableBase.Columns.Add("Line2", line2ColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "TEXT", blazingPizzaAddressTableBase);
            blazingPizzaAddressTableBase.Columns.Add("Name", nameColumnBase);
            var postalCodeColumnBase = new ColumnBase<ColumnMappingBase>("PostalCode", "TEXT", blazingPizzaAddressTableBase);
            blazingPizzaAddressTableBase.Columns.Add("PostalCode", postalCodeColumnBase);
            var regionColumnBase = new ColumnBase<ColumnMappingBase>("Region", "TEXT", blazingPizzaAddressTableBase);
            blazingPizzaAddressTableBase.Columns.Add("Region", regionColumnBase);
            relationalModel.DefaultTables.Add("BlazingPizza.Address", blazingPizzaAddressTableBase);
            var blazingPizzaAddressMappingBase = new TableMappingBase<ColumnMappingBase>(address, blazingPizzaAddressTableBase, true);
            blazingPizzaAddressTableBase.AddTypeMapping(blazingPizzaAddressMappingBase, false);
            defaultTableMappings.Add(blazingPizzaAddressMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, address.FindProperty("Id")!, blazingPizzaAddressMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)cityColumnBase, address.FindProperty("City")!, blazingPizzaAddressMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)line1ColumnBase, address.FindProperty("Line1")!, blazingPizzaAddressMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)line2ColumnBase, address.FindProperty("Line2")!, blazingPizzaAddressMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, address.FindProperty("Name")!, blazingPizzaAddressMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)postalCodeColumnBase, address.FindProperty("PostalCode")!, blazingPizzaAddressMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)regionColumnBase, address.FindProperty("Region")!, blazingPizzaAddressMappingBase);

            var tableMappings = new List<TableMapping>();
            address.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var addressTable = new Table("Address", null, relationalModel);
            var idColumn = new Column("Id", "INTEGER", addressTable);
            addressTable.Columns.Add("Id", idColumn);
            var cityColumn = new Column("City", "TEXT", addressTable);
            addressTable.Columns.Add("City", cityColumn);
            var line1Column = new Column("Line1", "TEXT", addressTable);
            addressTable.Columns.Add("Line1", line1Column);
            var line2Column = new Column("Line2", "TEXT", addressTable);
            addressTable.Columns.Add("Line2", line2Column);
            var nameColumn = new Column("Name", "TEXT", addressTable);
            addressTable.Columns.Add("Name", nameColumn);
            var postalCodeColumn = new Column("PostalCode", "TEXT", addressTable);
            addressTable.Columns.Add("PostalCode", postalCodeColumn);
            var regionColumn = new Column("Region", "TEXT", addressTable);
            addressTable.Columns.Add("Region", regionColumn);
            var pK_Address = new UniqueConstraint("PK_Address", addressTable, new[] { idColumn });
            addressTable.PrimaryKey = pK_Address;
            var pK_AddressUc = RelationalModel.GetKey(this,
                "BlazingPizza.Address",
                new[] { "Id" });
            pK_Address.MappedKeys.Add(pK_AddressUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AddressUc).Add(pK_Address);
            addressTable.UniqueConstraints.Add("PK_Address", pK_Address);
            relationalModel.Tables.Add(("Address", null), addressTable);
            var addressTableMapping = new TableMapping(address, addressTable, true);
            addressTable.AddTypeMapping(addressTableMapping, false);
            tableMappings.Add(addressTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, address.FindProperty("Id")!, addressTableMapping);
            RelationalModel.CreateColumnMapping(cityColumn, address.FindProperty("City")!, addressTableMapping);
            RelationalModel.CreateColumnMapping(line1Column, address.FindProperty("Line1")!, addressTableMapping);
            RelationalModel.CreateColumnMapping(line2Column, address.FindProperty("Line2")!, addressTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, address.FindProperty("Name")!, addressTableMapping);
            RelationalModel.CreateColumnMapping(postalCodeColumn, address.FindProperty("PostalCode")!, addressTableMapping);
            RelationalModel.CreateColumnMapping(regionColumn, address.FindProperty("Region")!, addressTableMapping);

            var latLong = FindEntityType("BlazingPizza.LatLong")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            latLong.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var blazingPizzaLatLongTableBase = new TableBase("BlazingPizza.LatLong", null, relationalModel);
            var latitudeColumnBase = new ColumnBase<ColumnMappingBase>("Latitude", "REAL", blazingPizzaLatLongTableBase);
            blazingPizzaLatLongTableBase.Columns.Add("Latitude", latitudeColumnBase);
            var longitudeColumnBase = new ColumnBase<ColumnMappingBase>("Longitude", "REAL", blazingPizzaLatLongTableBase);
            blazingPizzaLatLongTableBase.Columns.Add("Longitude", longitudeColumnBase);
            var orderIdColumnBase = new ColumnBase<ColumnMappingBase>("OrderId", "INTEGER", blazingPizzaLatLongTableBase);
            blazingPizzaLatLongTableBase.Columns.Add("OrderId", orderIdColumnBase);
            relationalModel.DefaultTables.Add("BlazingPizza.LatLong", blazingPizzaLatLongTableBase);
            var blazingPizzaLatLongMappingBase = new TableMappingBase<ColumnMappingBase>(latLong, blazingPizzaLatLongTableBase, true);
            blazingPizzaLatLongTableBase.AddTypeMapping(blazingPizzaLatLongMappingBase, false);
            defaultTableMappings0.Add(blazingPizzaLatLongMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)orderIdColumnBase, latLong.FindProperty("OrderId")!, blazingPizzaLatLongMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)latitudeColumnBase, latLong.FindProperty("Latitude")!, blazingPizzaLatLongMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)longitudeColumnBase, latLong.FindProperty("Longitude")!, blazingPizzaLatLongMappingBase);

            var tableMappings0 = new List<TableMapping>();
            latLong.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var ordersTable = new Table("Orders", null, relationalModel);
            var orderIdColumn = new Column("OrderId", "INTEGER", ordersTable);
            ordersTable.Columns.Add("OrderId", orderIdColumn);
            var createdTimeColumn = new Column("CreatedTime", "TEXT", ordersTable);
            ordersTable.Columns.Add("CreatedTime", createdTimeColumn);
            var deliveryAddressIdColumn = new Column("DeliveryAddressId", "INTEGER", ordersTable);
            ordersTable.Columns.Add("DeliveryAddressId", deliveryAddressIdColumn);
            var deliveryLocation_LatitudeColumn = new Column("DeliveryLocation_Latitude", "REAL", ordersTable)
            {
                IsNullable = true
            };
            ordersTable.Columns.Add("DeliveryLocation_Latitude", deliveryLocation_LatitudeColumn);
            var deliveryLocation_LongitudeColumn = new Column("DeliveryLocation_Longitude", "REAL", ordersTable)
            {
                IsNullable = true
            };
            ordersTable.Columns.Add("DeliveryLocation_Longitude", deliveryLocation_LongitudeColumn);
            var userIdColumn = new Column("UserId", "TEXT", ordersTable)
            {
                IsNullable = true
            };
            ordersTable.Columns.Add("UserId", userIdColumn);
            var pK_Orders = new UniqueConstraint("PK_Orders", ordersTable, new[] { orderIdColumn });
            ordersTable.PrimaryKey = pK_Orders;
            var pK_OrdersUc = RelationalModel.GetKey(this,
                "BlazingPizza.LatLong",
                new[] { "OrderId" });
            pK_Orders.MappedKeys.Add(pK_OrdersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_OrdersUc).Add(pK_Orders);
            var pK_OrdersUc0 = RelationalModel.GetKey(this,
                "BlazingPizza.Order",
                new[] { "OrderId" });
            pK_Orders.MappedKeys.Add(pK_OrdersUc0);
            RelationalModel.GetOrCreateUniqueConstraints(pK_OrdersUc0).Add(pK_Orders);
            ordersTable.UniqueConstraints.Add("PK_Orders", pK_Orders);
            var iX_Orders_DeliveryAddressId = new TableIndex(
            "IX_Orders_DeliveryAddressId", ordersTable, new[] { deliveryAddressIdColumn }, false);
            var iX_Orders_DeliveryAddressIdIx = RelationalModel.GetIndex(this,
                "BlazingPizza.Order",
                new[] { "DeliveryAddressId" });
            iX_Orders_DeliveryAddressId.MappedIndexes.Add(iX_Orders_DeliveryAddressIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Orders_DeliveryAddressIdIx).Add(iX_Orders_DeliveryAddressId);
            ordersTable.Indexes.Add("IX_Orders_DeliveryAddressId", iX_Orders_DeliveryAddressId);
            relationalModel.Tables.Add(("Orders", null), ordersTable);
            var ordersTableMapping = new TableMapping(latLong, ordersTable, true)
            {
                IsSharedTablePrincipal = false,
            };
            ordersTable.AddTypeMapping(ordersTableMapping, true);
            tableMappings0.Add(ordersTableMapping);
            ordersTable.AddRowInternalForeignKey(latLong, RelationalModel.GetForeignKey(this,
                "BlazingPizza.LatLong",
                new[] { "OrderId" },
                "BlazingPizza.Order",
                new[] { "OrderId" }));
            RelationalModel.CreateColumnMapping(orderIdColumn, latLong.FindProperty("OrderId")!, ordersTableMapping);
            RelationalModel.CreateColumnMapping(deliveryLocation_LatitudeColumn, latLong.FindProperty("Latitude")!, ordersTableMapping);
            RelationalModel.CreateColumnMapping(deliveryLocation_LongitudeColumn, latLong.FindProperty("Longitude")!, ordersTableMapping);

            var notificationSubscription = FindEntityType("BlazingPizza.NotificationSubscription")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            notificationSubscription.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var blazingPizzaNotificationSubscriptionTableBase = new TableBase("BlazingPizza.NotificationSubscription", null, relationalModel);
            var authColumnBase = new ColumnBase<ColumnMappingBase>("Auth", "TEXT", blazingPizzaNotificationSubscriptionTableBase)
            {
                IsNullable = true
            };
            blazingPizzaNotificationSubscriptionTableBase.Columns.Add("Auth", authColumnBase);
            var notificationSubscriptionIdColumnBase = new ColumnBase<ColumnMappingBase>("NotificationSubscriptionId", "INTEGER", blazingPizzaNotificationSubscriptionTableBase);
            blazingPizzaNotificationSubscriptionTableBase.Columns.Add("NotificationSubscriptionId", notificationSubscriptionIdColumnBase);
            var p256dhColumnBase = new ColumnBase<ColumnMappingBase>("P256dh", "TEXT", blazingPizzaNotificationSubscriptionTableBase)
            {
                IsNullable = true
            };
            blazingPizzaNotificationSubscriptionTableBase.Columns.Add("P256dh", p256dhColumnBase);
            var urlColumnBase = new ColumnBase<ColumnMappingBase>("Url", "TEXT", blazingPizzaNotificationSubscriptionTableBase)
            {
                IsNullable = true
            };
            blazingPizzaNotificationSubscriptionTableBase.Columns.Add("Url", urlColumnBase);
            var userIdColumnBase = new ColumnBase<ColumnMappingBase>("UserId", "TEXT", blazingPizzaNotificationSubscriptionTableBase)
            {
                IsNullable = true
            };
            blazingPizzaNotificationSubscriptionTableBase.Columns.Add("UserId", userIdColumnBase);
            relationalModel.DefaultTables.Add("BlazingPizza.NotificationSubscription", blazingPizzaNotificationSubscriptionTableBase);
            var blazingPizzaNotificationSubscriptionMappingBase = new TableMappingBase<ColumnMappingBase>(notificationSubscription, blazingPizzaNotificationSubscriptionTableBase, true);
            blazingPizzaNotificationSubscriptionTableBase.AddTypeMapping(blazingPizzaNotificationSubscriptionMappingBase, false);
            defaultTableMappings1.Add(blazingPizzaNotificationSubscriptionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)notificationSubscriptionIdColumnBase, notificationSubscription.FindProperty("NotificationSubscriptionId")!, blazingPizzaNotificationSubscriptionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)authColumnBase, notificationSubscription.FindProperty("Auth")!, blazingPizzaNotificationSubscriptionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)p256dhColumnBase, notificationSubscription.FindProperty("P256dh")!, blazingPizzaNotificationSubscriptionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)urlColumnBase, notificationSubscription.FindProperty("Url")!, blazingPizzaNotificationSubscriptionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase, notificationSubscription.FindProperty("UserId")!, blazingPizzaNotificationSubscriptionMappingBase);

            var tableMappings1 = new List<TableMapping>();
            notificationSubscription.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var notificationSubscriptionsTable = new Table("NotificationSubscriptions", null, relationalModel);
            var notificationSubscriptionIdColumn = new Column("NotificationSubscriptionId", "INTEGER", notificationSubscriptionsTable);
            notificationSubscriptionsTable.Columns.Add("NotificationSubscriptionId", notificationSubscriptionIdColumn);
            var authColumn = new Column("Auth", "TEXT", notificationSubscriptionsTable)
            {
                IsNullable = true
            };
            notificationSubscriptionsTable.Columns.Add("Auth", authColumn);
            var p256dhColumn = new Column("P256dh", "TEXT", notificationSubscriptionsTable)
            {
                IsNullable = true
            };
            notificationSubscriptionsTable.Columns.Add("P256dh", p256dhColumn);
            var urlColumn = new Column("Url", "TEXT", notificationSubscriptionsTable)
            {
                IsNullable = true
            };
            notificationSubscriptionsTable.Columns.Add("Url", urlColumn);
            var userIdColumn0 = new Column("UserId", "TEXT", notificationSubscriptionsTable)
            {
                IsNullable = true
            };
            notificationSubscriptionsTable.Columns.Add("UserId", userIdColumn0);
            var pK_NotificationSubscriptions = new UniqueConstraint("PK_NotificationSubscriptions", notificationSubscriptionsTable, new[] { notificationSubscriptionIdColumn });
            notificationSubscriptionsTable.PrimaryKey = pK_NotificationSubscriptions;
            var pK_NotificationSubscriptionsUc = RelationalModel.GetKey(this,
                "BlazingPizza.NotificationSubscription",
                new[] { "NotificationSubscriptionId" });
            pK_NotificationSubscriptions.MappedKeys.Add(pK_NotificationSubscriptionsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_NotificationSubscriptionsUc).Add(pK_NotificationSubscriptions);
            notificationSubscriptionsTable.UniqueConstraints.Add("PK_NotificationSubscriptions", pK_NotificationSubscriptions);
            relationalModel.Tables.Add(("NotificationSubscriptions", null), notificationSubscriptionsTable);
            var notificationSubscriptionsTableMapping = new TableMapping(notificationSubscription, notificationSubscriptionsTable, true);
            notificationSubscriptionsTable.AddTypeMapping(notificationSubscriptionsTableMapping, false);
            tableMappings1.Add(notificationSubscriptionsTableMapping);
            RelationalModel.CreateColumnMapping(notificationSubscriptionIdColumn, notificationSubscription.FindProperty("NotificationSubscriptionId")!, notificationSubscriptionsTableMapping);
            RelationalModel.CreateColumnMapping(authColumn, notificationSubscription.FindProperty("Auth")!, notificationSubscriptionsTableMapping);
            RelationalModel.CreateColumnMapping(p256dhColumn, notificationSubscription.FindProperty("P256dh")!, notificationSubscriptionsTableMapping);
            RelationalModel.CreateColumnMapping(urlColumn, notificationSubscription.FindProperty("Url")!, notificationSubscriptionsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn0, notificationSubscription.FindProperty("UserId")!, notificationSubscriptionsTableMapping);

            var order = FindEntityType("BlazingPizza.Order")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            order.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var blazingPizzaOrderTableBase = new TableBase("BlazingPizza.Order", null, relationalModel);
            var createdTimeColumnBase = new ColumnBase<ColumnMappingBase>("CreatedTime", "TEXT", blazingPizzaOrderTableBase);
            blazingPizzaOrderTableBase.Columns.Add("CreatedTime", createdTimeColumnBase);
            var deliveryAddressIdColumnBase = new ColumnBase<ColumnMappingBase>("DeliveryAddressId", "INTEGER", blazingPizzaOrderTableBase);
            blazingPizzaOrderTableBase.Columns.Add("DeliveryAddressId", deliveryAddressIdColumnBase);
            var orderIdColumnBase0 = new ColumnBase<ColumnMappingBase>("OrderId", "INTEGER", blazingPizzaOrderTableBase);
            blazingPizzaOrderTableBase.Columns.Add("OrderId", orderIdColumnBase0);
            var userIdColumnBase0 = new ColumnBase<ColumnMappingBase>("UserId", "TEXT", blazingPizzaOrderTableBase)
            {
                IsNullable = true
            };
            blazingPizzaOrderTableBase.Columns.Add("UserId", userIdColumnBase0);
            relationalModel.DefaultTables.Add("BlazingPizza.Order", blazingPizzaOrderTableBase);
            var blazingPizzaOrderMappingBase = new TableMappingBase<ColumnMappingBase>(order, blazingPizzaOrderTableBase, true);
            blazingPizzaOrderTableBase.AddTypeMapping(blazingPizzaOrderMappingBase, false);
            defaultTableMappings2.Add(blazingPizzaOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)orderIdColumnBase0, order.FindProperty("OrderId")!, blazingPizzaOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdTimeColumnBase, order.FindProperty("CreatedTime")!, blazingPizzaOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deliveryAddressIdColumnBase, order.FindProperty("DeliveryAddressId")!, blazingPizzaOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase0, order.FindProperty("UserId")!, blazingPizzaOrderMappingBase);

            var tableMappings2 = new List<TableMapping>();
            order.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var ordersTableMapping0 = new TableMapping(order, ordersTable, true)
            {
                IsSharedTablePrincipal = true,
            };
            ordersTable.AddTypeMapping(ordersTableMapping0, false);
            tableMappings2.Add(ordersTableMapping0);
            RelationalModel.CreateColumnMapping(orderIdColumn, order.FindProperty("OrderId")!, ordersTableMapping0);
            RelationalModel.CreateColumnMapping(createdTimeColumn, order.FindProperty("CreatedTime")!, ordersTableMapping0);
            RelationalModel.CreateColumnMapping(deliveryAddressIdColumn, order.FindProperty("DeliveryAddressId")!, ordersTableMapping0);
            RelationalModel.CreateColumnMapping(userIdColumn, order.FindProperty("UserId")!, ordersTableMapping0);

            var pizza = FindEntityType("BlazingPizza.Pizza")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            pizza.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var blazingPizzaPizzaTableBase = new TableBase("BlazingPizza.Pizza", null, relationalModel);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", blazingPizzaPizzaTableBase);
            blazingPizzaPizzaTableBase.Columns.Add("Id", idColumnBase0);
            var orderIdColumnBase1 = new ColumnBase<ColumnMappingBase>("OrderId", "INTEGER", blazingPizzaPizzaTableBase);
            blazingPizzaPizzaTableBase.Columns.Add("OrderId", orderIdColumnBase1);
            var sizeColumnBase = new ColumnBase<ColumnMappingBase>("Size", "INTEGER", blazingPizzaPizzaTableBase);
            blazingPizzaPizzaTableBase.Columns.Add("Size", sizeColumnBase);
            var specialIdColumnBase = new ColumnBase<ColumnMappingBase>("SpecialId", "INTEGER", blazingPizzaPizzaTableBase);
            blazingPizzaPizzaTableBase.Columns.Add("SpecialId", specialIdColumnBase);
            relationalModel.DefaultTables.Add("BlazingPizza.Pizza", blazingPizzaPizzaTableBase);
            var blazingPizzaPizzaMappingBase = new TableMappingBase<ColumnMappingBase>(pizza, blazingPizzaPizzaTableBase, true);
            blazingPizzaPizzaTableBase.AddTypeMapping(blazingPizzaPizzaMappingBase, false);
            defaultTableMappings3.Add(blazingPizzaPizzaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, pizza.FindProperty("Id")!, blazingPizzaPizzaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)orderIdColumnBase1, pizza.FindProperty("OrderId")!, blazingPizzaPizzaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sizeColumnBase, pizza.FindProperty("Size")!, blazingPizzaPizzaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)specialIdColumnBase, pizza.FindProperty("SpecialId")!, blazingPizzaPizzaMappingBase);

            var tableMappings3 = new List<TableMapping>();
            pizza.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var pizzasTable = new Table("Pizzas", null, relationalModel);
            var idColumn0 = new Column("Id", "INTEGER", pizzasTable);
            pizzasTable.Columns.Add("Id", idColumn0);
            var orderIdColumn0 = new Column("OrderId", "INTEGER", pizzasTable);
            pizzasTable.Columns.Add("OrderId", orderIdColumn0);
            var sizeColumn = new Column("Size", "INTEGER", pizzasTable);
            pizzasTable.Columns.Add("Size", sizeColumn);
            var specialIdColumn = new Column("SpecialId", "INTEGER", pizzasTable);
            pizzasTable.Columns.Add("SpecialId", specialIdColumn);
            var pK_Pizzas = new UniqueConstraint("PK_Pizzas", pizzasTable, new[] { idColumn0 });
            pizzasTable.PrimaryKey = pK_Pizzas;
            var pK_PizzasUc = RelationalModel.GetKey(this,
                "BlazingPizza.Pizza",
                new[] { "Id" });
            pK_Pizzas.MappedKeys.Add(pK_PizzasUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PizzasUc).Add(pK_Pizzas);
            pizzasTable.UniqueConstraints.Add("PK_Pizzas", pK_Pizzas);
            var iX_Pizzas_OrderId = new TableIndex(
            "IX_Pizzas_OrderId", pizzasTable, new[] { orderIdColumn0 }, false);
            var iX_Pizzas_OrderIdIx = RelationalModel.GetIndex(this,
                "BlazingPizza.Pizza",
                new[] { "OrderId" });
            iX_Pizzas_OrderId.MappedIndexes.Add(iX_Pizzas_OrderIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Pizzas_OrderIdIx).Add(iX_Pizzas_OrderId);
            pizzasTable.Indexes.Add("IX_Pizzas_OrderId", iX_Pizzas_OrderId);
            var iX_Pizzas_SpecialId = new TableIndex(
            "IX_Pizzas_SpecialId", pizzasTable, new[] { specialIdColumn }, false);
            var iX_Pizzas_SpecialIdIx = RelationalModel.GetIndex(this,
                "BlazingPizza.Pizza",
                new[] { "SpecialId" });
            iX_Pizzas_SpecialId.MappedIndexes.Add(iX_Pizzas_SpecialIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Pizzas_SpecialIdIx).Add(iX_Pizzas_SpecialId);
            pizzasTable.Indexes.Add("IX_Pizzas_SpecialId", iX_Pizzas_SpecialId);
            relationalModel.Tables.Add(("Pizzas", null), pizzasTable);
            var pizzasTableMapping = new TableMapping(pizza, pizzasTable, true);
            pizzasTable.AddTypeMapping(pizzasTableMapping, false);
            tableMappings3.Add(pizzasTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, pizza.FindProperty("Id")!, pizzasTableMapping);
            RelationalModel.CreateColumnMapping(orderIdColumn0, pizza.FindProperty("OrderId")!, pizzasTableMapping);
            RelationalModel.CreateColumnMapping(sizeColumn, pizza.FindProperty("Size")!, pizzasTableMapping);
            RelationalModel.CreateColumnMapping(specialIdColumn, pizza.FindProperty("SpecialId")!, pizzasTableMapping);

            var pizzaSpecial = FindEntityType("BlazingPizza.PizzaSpecial")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            pizzaSpecial.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var blazingPizzaPizzaSpecialTableBase = new TableBase("BlazingPizza.PizzaSpecial", null, relationalModel);
            var basePriceColumnBase = new ColumnBase<ColumnMappingBase>("BasePrice", "TEXT", blazingPizzaPizzaSpecialTableBase);
            blazingPizzaPizzaSpecialTableBase.Columns.Add("BasePrice", basePriceColumnBase);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "TEXT", blazingPizzaPizzaSpecialTableBase);
            blazingPizzaPizzaSpecialTableBase.Columns.Add("Description", descriptionColumnBase);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", blazingPizzaPizzaSpecialTableBase);
            blazingPizzaPizzaSpecialTableBase.Columns.Add("Id", idColumnBase1);
            var imageUrlColumnBase = new ColumnBase<ColumnMappingBase>("ImageUrl", "TEXT", blazingPizzaPizzaSpecialTableBase);
            blazingPizzaPizzaSpecialTableBase.Columns.Add("ImageUrl", imageUrlColumnBase);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("Name", "TEXT", blazingPizzaPizzaSpecialTableBase);
            blazingPizzaPizzaSpecialTableBase.Columns.Add("Name", nameColumnBase0);
            relationalModel.DefaultTables.Add("BlazingPizza.PizzaSpecial", blazingPizzaPizzaSpecialTableBase);
            var blazingPizzaPizzaSpecialMappingBase = new TableMappingBase<ColumnMappingBase>(pizzaSpecial, blazingPizzaPizzaSpecialTableBase, true);
            blazingPizzaPizzaSpecialTableBase.AddTypeMapping(blazingPizzaPizzaSpecialMappingBase, false);
            defaultTableMappings4.Add(blazingPizzaPizzaSpecialMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, pizzaSpecial.FindProperty("Id")!, blazingPizzaPizzaSpecialMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)basePriceColumnBase, pizzaSpecial.FindProperty("BasePrice")!, blazingPizzaPizzaSpecialMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, pizzaSpecial.FindProperty("Description")!, blazingPizzaPizzaSpecialMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)imageUrlColumnBase, pizzaSpecial.FindProperty("ImageUrl")!, blazingPizzaPizzaSpecialMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, pizzaSpecial.FindProperty("Name")!, blazingPizzaPizzaSpecialMappingBase);

            var tableMappings4 = new List<TableMapping>();
            pizzaSpecial.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var specialsTable = new Table("Specials", null, relationalModel);
            var idColumn1 = new Column("Id", "INTEGER", specialsTable);
            specialsTable.Columns.Add("Id", idColumn1);
            var basePriceColumn = new Column("BasePrice", "TEXT", specialsTable);
            specialsTable.Columns.Add("BasePrice", basePriceColumn);
            var descriptionColumn = new Column("Description", "TEXT", specialsTable);
            specialsTable.Columns.Add("Description", descriptionColumn);
            var imageUrlColumn = new Column("ImageUrl", "TEXT", specialsTable);
            specialsTable.Columns.Add("ImageUrl", imageUrlColumn);
            var nameColumn0 = new Column("Name", "TEXT", specialsTable);
            specialsTable.Columns.Add("Name", nameColumn0);
            var pK_Specials = new UniqueConstraint("PK_Specials", specialsTable, new[] { idColumn1 });
            specialsTable.PrimaryKey = pK_Specials;
            var pK_SpecialsUc = RelationalModel.GetKey(this,
                "BlazingPizza.PizzaSpecial",
                new[] { "Id" });
            pK_Specials.MappedKeys.Add(pK_SpecialsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_SpecialsUc).Add(pK_Specials);
            specialsTable.UniqueConstraints.Add("PK_Specials", pK_Specials);
            relationalModel.Tables.Add(("Specials", null), specialsTable);
            var specialsTableMapping = new TableMapping(pizzaSpecial, specialsTable, true);
            specialsTable.AddTypeMapping(specialsTableMapping, false);
            tableMappings4.Add(specialsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, pizzaSpecial.FindProperty("Id")!, specialsTableMapping);
            RelationalModel.CreateColumnMapping(basePriceColumn, pizzaSpecial.FindProperty("BasePrice")!, specialsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, pizzaSpecial.FindProperty("Description")!, specialsTableMapping);
            RelationalModel.CreateColumnMapping(imageUrlColumn, pizzaSpecial.FindProperty("ImageUrl")!, specialsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, pizzaSpecial.FindProperty("Name")!, specialsTableMapping);

            var pizzaTopping = FindEntityType("BlazingPizza.PizzaTopping")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            pizzaTopping.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var blazingPizzaPizzaToppingTableBase = new TableBase("BlazingPizza.PizzaTopping", null, relationalModel);
            var pizzaIdColumnBase = new ColumnBase<ColumnMappingBase>("PizzaId", "INTEGER", blazingPizzaPizzaToppingTableBase);
            blazingPizzaPizzaToppingTableBase.Columns.Add("PizzaId", pizzaIdColumnBase);
            var toppingIdColumnBase = new ColumnBase<ColumnMappingBase>("ToppingId", "INTEGER", blazingPizzaPizzaToppingTableBase);
            blazingPizzaPizzaToppingTableBase.Columns.Add("ToppingId", toppingIdColumnBase);
            relationalModel.DefaultTables.Add("BlazingPizza.PizzaTopping", blazingPizzaPizzaToppingTableBase);
            var blazingPizzaPizzaToppingMappingBase = new TableMappingBase<ColumnMappingBase>(pizzaTopping, blazingPizzaPizzaToppingTableBase, true);
            blazingPizzaPizzaToppingTableBase.AddTypeMapping(blazingPizzaPizzaToppingMappingBase, false);
            defaultTableMappings5.Add(blazingPizzaPizzaToppingMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)pizzaIdColumnBase, pizzaTopping.FindProperty("PizzaId")!, blazingPizzaPizzaToppingMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)toppingIdColumnBase, pizzaTopping.FindProperty("ToppingId")!, blazingPizzaPizzaToppingMappingBase);

            var tableMappings5 = new List<TableMapping>();
            pizzaTopping.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var pizzaToppingTable = new Table("PizzaTopping", null, relationalModel);
            var pizzaIdColumn = new Column("PizzaId", "INTEGER", pizzaToppingTable);
            pizzaToppingTable.Columns.Add("PizzaId", pizzaIdColumn);
            var toppingIdColumn = new Column("ToppingId", "INTEGER", pizzaToppingTable);
            pizzaToppingTable.Columns.Add("ToppingId", toppingIdColumn);
            var pK_PizzaTopping = new UniqueConstraint("PK_PizzaTopping", pizzaToppingTable, new[] { pizzaIdColumn, toppingIdColumn });
            pizzaToppingTable.PrimaryKey = pK_PizzaTopping;
            var pK_PizzaToppingUc = RelationalModel.GetKey(this,
                "BlazingPizza.PizzaTopping",
                new[] { "PizzaId", "ToppingId" });
            pK_PizzaTopping.MappedKeys.Add(pK_PizzaToppingUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PizzaToppingUc).Add(pK_PizzaTopping);
            pizzaToppingTable.UniqueConstraints.Add("PK_PizzaTopping", pK_PizzaTopping);
            var iX_PizzaTopping_ToppingId = new TableIndex(
            "IX_PizzaTopping_ToppingId", pizzaToppingTable, new[] { toppingIdColumn }, false);
            var iX_PizzaTopping_ToppingIdIx = RelationalModel.GetIndex(this,
                "BlazingPizza.PizzaTopping",
                new[] { "ToppingId" });
            iX_PizzaTopping_ToppingId.MappedIndexes.Add(iX_PizzaTopping_ToppingIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_PizzaTopping_ToppingIdIx).Add(iX_PizzaTopping_ToppingId);
            pizzaToppingTable.Indexes.Add("IX_PizzaTopping_ToppingId", iX_PizzaTopping_ToppingId);
            relationalModel.Tables.Add(("PizzaTopping", null), pizzaToppingTable);
            var pizzaToppingTableMapping = new TableMapping(pizzaTopping, pizzaToppingTable, true);
            pizzaToppingTable.AddTypeMapping(pizzaToppingTableMapping, false);
            tableMappings5.Add(pizzaToppingTableMapping);
            RelationalModel.CreateColumnMapping(pizzaIdColumn, pizzaTopping.FindProperty("PizzaId")!, pizzaToppingTableMapping);
            RelationalModel.CreateColumnMapping(toppingIdColumn, pizzaTopping.FindProperty("ToppingId")!, pizzaToppingTableMapping);

            var pizzaStoreUser = FindEntityType("BlazingPizza.Server.PizzaStoreUser")!;

            var defaultTableMappings6 = new List<TableMappingBase<ColumnMappingBase>>();
            pizzaStoreUser.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6);
            var blazingPizzaServerPizzaStoreUserTableBase = new TableBase("BlazingPizza.Server.PizzaStoreUser", null, relationalModel);
            var accessFailedCountColumnBase = new ColumnBase<ColumnMappingBase>("AccessFailedCount", "INTEGER", blazingPizzaServerPizzaStoreUserTableBase);
            blazingPizzaServerPizzaStoreUserTableBase.Columns.Add("AccessFailedCount", accessFailedCountColumnBase);
            var concurrencyStampColumnBase = new ColumnBase<ColumnMappingBase>("ConcurrencyStamp", "TEXT", blazingPizzaServerPizzaStoreUserTableBase)
            {
                IsNullable = true
            };
            blazingPizzaServerPizzaStoreUserTableBase.Columns.Add("ConcurrencyStamp", concurrencyStampColumnBase);
            var emailColumnBase = new ColumnBase<ColumnMappingBase>("Email", "TEXT", blazingPizzaServerPizzaStoreUserTableBase)
            {
                IsNullable = true
            };
            blazingPizzaServerPizzaStoreUserTableBase.Columns.Add("Email", emailColumnBase);
            var emailConfirmedColumnBase = new ColumnBase<ColumnMappingBase>("EmailConfirmed", "INTEGER", blazingPizzaServerPizzaStoreUserTableBase);
            blazingPizzaServerPizzaStoreUserTableBase.Columns.Add("EmailConfirmed", emailConfirmedColumnBase);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", blazingPizzaServerPizzaStoreUserTableBase);
            blazingPizzaServerPizzaStoreUserTableBase.Columns.Add("Id", idColumnBase2);
            var lockoutEnabledColumnBase = new ColumnBase<ColumnMappingBase>("LockoutEnabled", "INTEGER", blazingPizzaServerPizzaStoreUserTableBase);
            blazingPizzaServerPizzaStoreUserTableBase.Columns.Add("LockoutEnabled", lockoutEnabledColumnBase);
            var lockoutEndColumnBase = new ColumnBase<ColumnMappingBase>("LockoutEnd", "TEXT", blazingPizzaServerPizzaStoreUserTableBase)
            {
                IsNullable = true
            };
            blazingPizzaServerPizzaStoreUserTableBase.Columns.Add("LockoutEnd", lockoutEndColumnBase);
            var normalizedEmailColumnBase = new ColumnBase<ColumnMappingBase>("NormalizedEmail", "TEXT", blazingPizzaServerPizzaStoreUserTableBase)
            {
                IsNullable = true
            };
            blazingPizzaServerPizzaStoreUserTableBase.Columns.Add("NormalizedEmail", normalizedEmailColumnBase);
            var normalizedUserNameColumnBase = new ColumnBase<ColumnMappingBase>("NormalizedUserName", "TEXT", blazingPizzaServerPizzaStoreUserTableBase)
            {
                IsNullable = true
            };
            blazingPizzaServerPizzaStoreUserTableBase.Columns.Add("NormalizedUserName", normalizedUserNameColumnBase);
            var passwordHashColumnBase = new ColumnBase<ColumnMappingBase>("PasswordHash", "TEXT", blazingPizzaServerPizzaStoreUserTableBase)
            {
                IsNullable = true
            };
            blazingPizzaServerPizzaStoreUserTableBase.Columns.Add("PasswordHash", passwordHashColumnBase);
            var phoneNumberColumnBase = new ColumnBase<ColumnMappingBase>("PhoneNumber", "TEXT", blazingPizzaServerPizzaStoreUserTableBase)
            {
                IsNullable = true
            };
            blazingPizzaServerPizzaStoreUserTableBase.Columns.Add("PhoneNumber", phoneNumberColumnBase);
            var phoneNumberConfirmedColumnBase = new ColumnBase<ColumnMappingBase>("PhoneNumberConfirmed", "INTEGER", blazingPizzaServerPizzaStoreUserTableBase);
            blazingPizzaServerPizzaStoreUserTableBase.Columns.Add("PhoneNumberConfirmed", phoneNumberConfirmedColumnBase);
            var securityStampColumnBase = new ColumnBase<ColumnMappingBase>("SecurityStamp", "TEXT", blazingPizzaServerPizzaStoreUserTableBase)
            {
                IsNullable = true
            };
            blazingPizzaServerPizzaStoreUserTableBase.Columns.Add("SecurityStamp", securityStampColumnBase);
            var twoFactorEnabledColumnBase = new ColumnBase<ColumnMappingBase>("TwoFactorEnabled", "INTEGER", blazingPizzaServerPizzaStoreUserTableBase);
            blazingPizzaServerPizzaStoreUserTableBase.Columns.Add("TwoFactorEnabled", twoFactorEnabledColumnBase);
            var userNameColumnBase = new ColumnBase<ColumnMappingBase>("UserName", "TEXT", blazingPizzaServerPizzaStoreUserTableBase)
            {
                IsNullable = true
            };
            blazingPizzaServerPizzaStoreUserTableBase.Columns.Add("UserName", userNameColumnBase);
            relationalModel.DefaultTables.Add("BlazingPizza.Server.PizzaStoreUser", blazingPizzaServerPizzaStoreUserTableBase);
            var blazingPizzaServerPizzaStoreUserMappingBase = new TableMappingBase<ColumnMappingBase>(pizzaStoreUser, blazingPizzaServerPizzaStoreUserTableBase, true);
            blazingPizzaServerPizzaStoreUserTableBase.AddTypeMapping(blazingPizzaServerPizzaStoreUserMappingBase, false);
            defaultTableMappings6.Add(blazingPizzaServerPizzaStoreUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, pizzaStoreUser.FindProperty("Id")!, blazingPizzaServerPizzaStoreUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)accessFailedCountColumnBase, pizzaStoreUser.FindProperty("AccessFailedCount")!, blazingPizzaServerPizzaStoreUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrencyStampColumnBase, pizzaStoreUser.FindProperty("ConcurrencyStamp")!, blazingPizzaServerPizzaStoreUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailColumnBase, pizzaStoreUser.FindProperty("Email")!, blazingPizzaServerPizzaStoreUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailConfirmedColumnBase, pizzaStoreUser.FindProperty("EmailConfirmed")!, blazingPizzaServerPizzaStoreUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockoutEnabledColumnBase, pizzaStoreUser.FindProperty("LockoutEnabled")!, blazingPizzaServerPizzaStoreUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lockoutEndColumnBase, pizzaStoreUser.FindProperty("LockoutEnd")!, blazingPizzaServerPizzaStoreUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalizedEmailColumnBase, pizzaStoreUser.FindProperty("NormalizedEmail")!, blazingPizzaServerPizzaStoreUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalizedUserNameColumnBase, pizzaStoreUser.FindProperty("NormalizedUserName")!, blazingPizzaServerPizzaStoreUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)passwordHashColumnBase, pizzaStoreUser.FindProperty("PasswordHash")!, blazingPizzaServerPizzaStoreUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phoneNumberColumnBase, pizzaStoreUser.FindProperty("PhoneNumber")!, blazingPizzaServerPizzaStoreUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)phoneNumberConfirmedColumnBase, pizzaStoreUser.FindProperty("PhoneNumberConfirmed")!, blazingPizzaServerPizzaStoreUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)securityStampColumnBase, pizzaStoreUser.FindProperty("SecurityStamp")!, blazingPizzaServerPizzaStoreUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)twoFactorEnabledColumnBase, pizzaStoreUser.FindProperty("TwoFactorEnabled")!, blazingPizzaServerPizzaStoreUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userNameColumnBase, pizzaStoreUser.FindProperty("UserName")!, blazingPizzaServerPizzaStoreUserMappingBase);

            var tableMappings6 = new List<TableMapping>();
            pizzaStoreUser.SetRuntimeAnnotation("Relational:TableMappings", tableMappings6);
            var aspNetUsersTable = new Table("AspNetUsers", null, relationalModel);
            var idColumn2 = new Column("Id", "TEXT", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("Id", idColumn2);
            var accessFailedCountColumn = new Column("AccessFailedCount", "INTEGER", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("AccessFailedCount", accessFailedCountColumn);
            var concurrencyStampColumn = new Column("ConcurrencyStamp", "TEXT", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("ConcurrencyStamp", concurrencyStampColumn);
            var emailColumn = new Column("Email", "TEXT", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("Email", emailColumn);
            var emailConfirmedColumn = new Column("EmailConfirmed", "INTEGER", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("EmailConfirmed", emailConfirmedColumn);
            var lockoutEnabledColumn = new Column("LockoutEnabled", "INTEGER", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("LockoutEnabled", lockoutEnabledColumn);
            var lockoutEndColumn = new Column("LockoutEnd", "TEXT", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("LockoutEnd", lockoutEndColumn);
            var normalizedEmailColumn = new Column("NormalizedEmail", "TEXT", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("NormalizedEmail", normalizedEmailColumn);
            var normalizedUserNameColumn = new Column("NormalizedUserName", "TEXT", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("NormalizedUserName", normalizedUserNameColumn);
            var passwordHashColumn = new Column("PasswordHash", "TEXT", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("PasswordHash", passwordHashColumn);
            var phoneNumberColumn = new Column("PhoneNumber", "TEXT", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("PhoneNumber", phoneNumberColumn);
            var phoneNumberConfirmedColumn = new Column("PhoneNumberConfirmed", "INTEGER", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("PhoneNumberConfirmed", phoneNumberConfirmedColumn);
            var securityStampColumn = new Column("SecurityStamp", "TEXT", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("SecurityStamp", securityStampColumn);
            var twoFactorEnabledColumn = new Column("TwoFactorEnabled", "INTEGER", aspNetUsersTable);
            aspNetUsersTable.Columns.Add("TwoFactorEnabled", twoFactorEnabledColumn);
            var userNameColumn = new Column("UserName", "TEXT", aspNetUsersTable)
            {
                IsNullable = true
            };
            aspNetUsersTable.Columns.Add("UserName", userNameColumn);
            var pK_AspNetUsers = new UniqueConstraint("PK_AspNetUsers", aspNetUsersTable, new[] { idColumn2 });
            aspNetUsersTable.PrimaryKey = pK_AspNetUsers;
            var pK_AspNetUsersUc = RelationalModel.GetKey(this,
                "BlazingPizza.Server.PizzaStoreUser",
                new[] { "Id" });
            pK_AspNetUsers.MappedKeys.Add(pK_AspNetUsersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUsersUc).Add(pK_AspNetUsers);
            aspNetUsersTable.UniqueConstraints.Add("PK_AspNetUsers", pK_AspNetUsers);
            var emailIndex = new TableIndex(
            "EmailIndex", aspNetUsersTable, new[] { normalizedEmailColumn }, false);
            var emailIndexIx = RelationalModel.GetIndex(this,
                "BlazingPizza.Server.PizzaStoreUser",
                new[] { "NormalizedEmail" });
            emailIndex.MappedIndexes.Add(emailIndexIx);
            RelationalModel.GetOrCreateTableIndexes(emailIndexIx).Add(emailIndex);
            aspNetUsersTable.Indexes.Add("EmailIndex", emailIndex);
            var userNameIndex = new TableIndex(
            "UserNameIndex", aspNetUsersTable, new[] { normalizedUserNameColumn }, true);
            var userNameIndexIx = RelationalModel.GetIndex(this,
                "BlazingPizza.Server.PizzaStoreUser",
                new[] { "NormalizedUserName" });
            userNameIndex.MappedIndexes.Add(userNameIndexIx);
            RelationalModel.GetOrCreateTableIndexes(userNameIndexIx).Add(userNameIndex);
            aspNetUsersTable.Indexes.Add("UserNameIndex", userNameIndex);
            relationalModel.Tables.Add(("AspNetUsers", null), aspNetUsersTable);
            var aspNetUsersTableMapping = new TableMapping(pizzaStoreUser, aspNetUsersTable, true);
            aspNetUsersTable.AddTypeMapping(aspNetUsersTableMapping, false);
            tableMappings6.Add(aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, pizzaStoreUser.FindProperty("Id")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(accessFailedCountColumn, pizzaStoreUser.FindProperty("AccessFailedCount")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(concurrencyStampColumn, pizzaStoreUser.FindProperty("ConcurrencyStamp")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(emailColumn, pizzaStoreUser.FindProperty("Email")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(emailConfirmedColumn, pizzaStoreUser.FindProperty("EmailConfirmed")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lockoutEnabledColumn, pizzaStoreUser.FindProperty("LockoutEnabled")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(lockoutEndColumn, pizzaStoreUser.FindProperty("LockoutEnd")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(normalizedEmailColumn, pizzaStoreUser.FindProperty("NormalizedEmail")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(normalizedUserNameColumn, pizzaStoreUser.FindProperty("NormalizedUserName")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(passwordHashColumn, pizzaStoreUser.FindProperty("PasswordHash")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(phoneNumberColumn, pizzaStoreUser.FindProperty("PhoneNumber")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(phoneNumberConfirmedColumn, pizzaStoreUser.FindProperty("PhoneNumberConfirmed")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(securityStampColumn, pizzaStoreUser.FindProperty("SecurityStamp")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(twoFactorEnabledColumn, pizzaStoreUser.FindProperty("TwoFactorEnabled")!, aspNetUsersTableMapping);
            RelationalModel.CreateColumnMapping(userNameColumn, pizzaStoreUser.FindProperty("UserName")!, aspNetUsersTableMapping);

            var topping = FindEntityType("BlazingPizza.Topping")!;

            var defaultTableMappings7 = new List<TableMappingBase<ColumnMappingBase>>();
            topping.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings7);
            var blazingPizzaToppingTableBase = new TableBase("BlazingPizza.Topping", null, relationalModel);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", blazingPizzaToppingTableBase);
            blazingPizzaToppingTableBase.Columns.Add("Id", idColumnBase3);
            var nameColumnBase1 = new ColumnBase<ColumnMappingBase>("Name", "TEXT", blazingPizzaToppingTableBase);
            blazingPizzaToppingTableBase.Columns.Add("Name", nameColumnBase1);
            var priceColumnBase = new ColumnBase<ColumnMappingBase>("Price", "TEXT", blazingPizzaToppingTableBase);
            blazingPizzaToppingTableBase.Columns.Add("Price", priceColumnBase);
            relationalModel.DefaultTables.Add("BlazingPizza.Topping", blazingPizzaToppingTableBase);
            var blazingPizzaToppingMappingBase = new TableMappingBase<ColumnMappingBase>(topping, blazingPizzaToppingTableBase, true);
            blazingPizzaToppingTableBase.AddTypeMapping(blazingPizzaToppingMappingBase, false);
            defaultTableMappings7.Add(blazingPizzaToppingMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, topping.FindProperty("Id")!, blazingPizzaToppingMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase1, topping.FindProperty("Name")!, blazingPizzaToppingMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)priceColumnBase, topping.FindProperty("Price")!, blazingPizzaToppingMappingBase);

            var tableMappings7 = new List<TableMapping>();
            topping.SetRuntimeAnnotation("Relational:TableMappings", tableMappings7);
            var toppingsTable = new Table("Toppings", null, relationalModel);
            var idColumn3 = new Column("Id", "INTEGER", toppingsTable);
            toppingsTable.Columns.Add("Id", idColumn3);
            var nameColumn1 = new Column("Name", "TEXT", toppingsTable);
            toppingsTable.Columns.Add("Name", nameColumn1);
            var priceColumn = new Column("Price", "TEXT", toppingsTable);
            toppingsTable.Columns.Add("Price", priceColumn);
            var pK_Toppings = new UniqueConstraint("PK_Toppings", toppingsTable, new[] { idColumn3 });
            toppingsTable.PrimaryKey = pK_Toppings;
            var pK_ToppingsUc = RelationalModel.GetKey(this,
                "BlazingPizza.Topping",
                new[] { "Id" });
            pK_Toppings.MappedKeys.Add(pK_ToppingsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ToppingsUc).Add(pK_Toppings);
            toppingsTable.UniqueConstraints.Add("PK_Toppings", pK_Toppings);
            relationalModel.Tables.Add(("Toppings", null), toppingsTable);
            var toppingsTableMapping = new TableMapping(topping, toppingsTable, true);
            toppingsTable.AddTypeMapping(toppingsTableMapping, false);
            tableMappings7.Add(toppingsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, topping.FindProperty("Id")!, toppingsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn1, topping.FindProperty("Name")!, toppingsTableMapping);
            RelationalModel.CreateColumnMapping(priceColumn, topping.FindProperty("Price")!, toppingsTableMapping);

            var deviceFlowCodes = FindEntityType("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes")!;

            var defaultTableMappings8 = new List<TableMappingBase<ColumnMappingBase>>();
            deviceFlowCodes.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings8);
            var duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesTableBase = new TableBase("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", null, relationalModel);
            var clientIdColumnBase = new ColumnBase<ColumnMappingBase>("ClientId", "TEXT", duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesTableBase);
            duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesTableBase.Columns.Add("ClientId", clientIdColumnBase);
            var creationTimeColumnBase = new ColumnBase<ColumnMappingBase>("CreationTime", "TEXT", duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesTableBase);
            duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesTableBase.Columns.Add("CreationTime", creationTimeColumnBase);
            var dataColumnBase = new ColumnBase<ColumnMappingBase>("Data", "TEXT", duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesTableBase);
            duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesTableBase.Columns.Add("Data", dataColumnBase);
            var descriptionColumnBase0 = new ColumnBase<ColumnMappingBase>("Description", "TEXT", duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesTableBase)
            {
                IsNullable = true
            };
            duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesTableBase.Columns.Add("Description", descriptionColumnBase0);
            var deviceCodeColumnBase = new ColumnBase<ColumnMappingBase>("DeviceCode", "TEXT", duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesTableBase);
            duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesTableBase.Columns.Add("DeviceCode", deviceCodeColumnBase);
            var expirationColumnBase = new ColumnBase<ColumnMappingBase>("Expiration", "TEXT", duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesTableBase);
            duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesTableBase.Columns.Add("Expiration", expirationColumnBase);
            var sessionIdColumnBase = new ColumnBase<ColumnMappingBase>("SessionId", "TEXT", duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesTableBase)
            {
                IsNullable = true
            };
            duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesTableBase.Columns.Add("SessionId", sessionIdColumnBase);
            var subjectIdColumnBase = new ColumnBase<ColumnMappingBase>("SubjectId", "TEXT", duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesTableBase)
            {
                IsNullable = true
            };
            duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesTableBase.Columns.Add("SubjectId", subjectIdColumnBase);
            var userCodeColumnBase = new ColumnBase<ColumnMappingBase>("UserCode", "TEXT", duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesTableBase);
            duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesTableBase.Columns.Add("UserCode", userCodeColumnBase);
            relationalModel.DefaultTables.Add("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesTableBase);
            var duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesMappingBase = new TableMappingBase<ColumnMappingBase>(deviceFlowCodes, duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesTableBase, true);
            duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesTableBase.AddTypeMapping(duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesMappingBase, false);
            defaultTableMappings8.Add(duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userCodeColumnBase, deviceFlowCodes.FindProperty("UserCode")!, duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)clientIdColumnBase, deviceFlowCodes.FindProperty("ClientId")!, duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)creationTimeColumnBase, deviceFlowCodes.FindProperty("CreationTime")!, duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dataColumnBase, deviceFlowCodes.FindProperty("Data")!, duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase0, deviceFlowCodes.FindProperty("Description")!, duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deviceCodeColumnBase, deviceFlowCodes.FindProperty("DeviceCode")!, duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)expirationColumnBase, deviceFlowCodes.FindProperty("Expiration")!, duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sessionIdColumnBase, deviceFlowCodes.FindProperty("SessionId")!, duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)subjectIdColumnBase, deviceFlowCodes.FindProperty("SubjectId")!, duendeIdentityServerEntityFrameworkEntitiesDeviceFlowCodesMappingBase);

            var tableMappings8 = new List<TableMapping>();
            deviceFlowCodes.SetRuntimeAnnotation("Relational:TableMappings", tableMappings8);
            var deviceCodesTable = new Table("DeviceCodes", null, relationalModel);
            var userCodeColumn = new Column("UserCode", "TEXT", deviceCodesTable);
            deviceCodesTable.Columns.Add("UserCode", userCodeColumn);
            var clientIdColumn = new Column("ClientId", "TEXT", deviceCodesTable);
            deviceCodesTable.Columns.Add("ClientId", clientIdColumn);
            var creationTimeColumn = new Column("CreationTime", "TEXT", deviceCodesTable);
            deviceCodesTable.Columns.Add("CreationTime", creationTimeColumn);
            var dataColumn = new Column("Data", "TEXT", deviceCodesTable);
            deviceCodesTable.Columns.Add("Data", dataColumn);
            var descriptionColumn0 = new Column("Description", "TEXT", deviceCodesTable)
            {
                IsNullable = true
            };
            deviceCodesTable.Columns.Add("Description", descriptionColumn0);
            var deviceCodeColumn = new Column("DeviceCode", "TEXT", deviceCodesTable);
            deviceCodesTable.Columns.Add("DeviceCode", deviceCodeColumn);
            var expirationColumn = new Column("Expiration", "TEXT", deviceCodesTable);
            deviceCodesTable.Columns.Add("Expiration", expirationColumn);
            var sessionIdColumn = new Column("SessionId", "TEXT", deviceCodesTable)
            {
                IsNullable = true
            };
            deviceCodesTable.Columns.Add("SessionId", sessionIdColumn);
            var subjectIdColumn = new Column("SubjectId", "TEXT", deviceCodesTable)
            {
                IsNullable = true
            };
            deviceCodesTable.Columns.Add("SubjectId", subjectIdColumn);
            var pK_DeviceCodes = new UniqueConstraint("PK_DeviceCodes", deviceCodesTable, new[] { userCodeColumn });
            deviceCodesTable.PrimaryKey = pK_DeviceCodes;
            var pK_DeviceCodesUc = RelationalModel.GetKey(this,
                "Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes",
                new[] { "UserCode" });
            pK_DeviceCodes.MappedKeys.Add(pK_DeviceCodesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_DeviceCodesUc).Add(pK_DeviceCodes);
            deviceCodesTable.UniqueConstraints.Add("PK_DeviceCodes", pK_DeviceCodes);
            var iX_DeviceCodes_DeviceCode = new TableIndex(
            "IX_DeviceCodes_DeviceCode", deviceCodesTable, new[] { deviceCodeColumn }, true);
            var iX_DeviceCodes_DeviceCodeIx = RelationalModel.GetIndex(this,
                "Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes",
                new[] { "DeviceCode" });
            iX_DeviceCodes_DeviceCode.MappedIndexes.Add(iX_DeviceCodes_DeviceCodeIx);
            RelationalModel.GetOrCreateTableIndexes(iX_DeviceCodes_DeviceCodeIx).Add(iX_DeviceCodes_DeviceCode);
            deviceCodesTable.Indexes.Add("IX_DeviceCodes_DeviceCode", iX_DeviceCodes_DeviceCode);
            var iX_DeviceCodes_Expiration = new TableIndex(
            "IX_DeviceCodes_Expiration", deviceCodesTable, new[] { expirationColumn }, false);
            var iX_DeviceCodes_ExpirationIx = RelationalModel.GetIndex(this,
                "Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes",
                new[] { "Expiration" });
            iX_DeviceCodes_Expiration.MappedIndexes.Add(iX_DeviceCodes_ExpirationIx);
            RelationalModel.GetOrCreateTableIndexes(iX_DeviceCodes_ExpirationIx).Add(iX_DeviceCodes_Expiration);
            deviceCodesTable.Indexes.Add("IX_DeviceCodes_Expiration", iX_DeviceCodes_Expiration);
            relationalModel.Tables.Add(("DeviceCodes", null), deviceCodesTable);
            var deviceCodesTableMapping = new TableMapping(deviceFlowCodes, deviceCodesTable, true);
            deviceCodesTable.AddTypeMapping(deviceCodesTableMapping, false);
            tableMappings8.Add(deviceCodesTableMapping);
            RelationalModel.CreateColumnMapping(userCodeColumn, deviceFlowCodes.FindProperty("UserCode")!, deviceCodesTableMapping);
            RelationalModel.CreateColumnMapping(clientIdColumn, deviceFlowCodes.FindProperty("ClientId")!, deviceCodesTableMapping);
            RelationalModel.CreateColumnMapping(creationTimeColumn, deviceFlowCodes.FindProperty("CreationTime")!, deviceCodesTableMapping);
            RelationalModel.CreateColumnMapping(dataColumn, deviceFlowCodes.FindProperty("Data")!, deviceCodesTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn0, deviceFlowCodes.FindProperty("Description")!, deviceCodesTableMapping);
            RelationalModel.CreateColumnMapping(deviceCodeColumn, deviceFlowCodes.FindProperty("DeviceCode")!, deviceCodesTableMapping);
            RelationalModel.CreateColumnMapping(expirationColumn, deviceFlowCodes.FindProperty("Expiration")!, deviceCodesTableMapping);
            RelationalModel.CreateColumnMapping(sessionIdColumn, deviceFlowCodes.FindProperty("SessionId")!, deviceCodesTableMapping);
            RelationalModel.CreateColumnMapping(subjectIdColumn, deviceFlowCodes.FindProperty("SubjectId")!, deviceCodesTableMapping);

            var key = FindEntityType("Duende.IdentityServer.EntityFramework.Entities.Key")!;

            var defaultTableMappings9 = new List<TableMappingBase<ColumnMappingBase>>();
            key.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings9);
            var duendeIdentityServerEntityFrameworkEntitiesKeyTableBase = new TableBase("Duende.IdentityServer.EntityFramework.Entities.Key", null, relationalModel);
            var algorithmColumnBase = new ColumnBase<ColumnMappingBase>("Algorithm", "TEXT", duendeIdentityServerEntityFrameworkEntitiesKeyTableBase);
            duendeIdentityServerEntityFrameworkEntitiesKeyTableBase.Columns.Add("Algorithm", algorithmColumnBase);
            var createdColumnBase = new ColumnBase<ColumnMappingBase>("Created", "TEXT", duendeIdentityServerEntityFrameworkEntitiesKeyTableBase);
            duendeIdentityServerEntityFrameworkEntitiesKeyTableBase.Columns.Add("Created", createdColumnBase);
            var dataColumnBase0 = new ColumnBase<ColumnMappingBase>("Data", "TEXT", duendeIdentityServerEntityFrameworkEntitiesKeyTableBase);
            duendeIdentityServerEntityFrameworkEntitiesKeyTableBase.Columns.Add("Data", dataColumnBase0);
            var dataProtectedColumnBase = new ColumnBase<ColumnMappingBase>("DataProtected", "INTEGER", duendeIdentityServerEntityFrameworkEntitiesKeyTableBase);
            duendeIdentityServerEntityFrameworkEntitiesKeyTableBase.Columns.Add("DataProtected", dataProtectedColumnBase);
            var idColumnBase4 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", duendeIdentityServerEntityFrameworkEntitiesKeyTableBase);
            duendeIdentityServerEntityFrameworkEntitiesKeyTableBase.Columns.Add("Id", idColumnBase4);
            var isX509CertificateColumnBase = new ColumnBase<ColumnMappingBase>("IsX509Certificate", "INTEGER", duendeIdentityServerEntityFrameworkEntitiesKeyTableBase);
            duendeIdentityServerEntityFrameworkEntitiesKeyTableBase.Columns.Add("IsX509Certificate", isX509CertificateColumnBase);
            var useColumnBase = new ColumnBase<ColumnMappingBase>("Use", "TEXT", duendeIdentityServerEntityFrameworkEntitiesKeyTableBase)
            {
                IsNullable = true
            };
            duendeIdentityServerEntityFrameworkEntitiesKeyTableBase.Columns.Add("Use", useColumnBase);
            var versionColumnBase = new ColumnBase<ColumnMappingBase>("Version", "INTEGER", duendeIdentityServerEntityFrameworkEntitiesKeyTableBase);
            duendeIdentityServerEntityFrameworkEntitiesKeyTableBase.Columns.Add("Version", versionColumnBase);
            relationalModel.DefaultTables.Add("Duende.IdentityServer.EntityFramework.Entities.Key", duendeIdentityServerEntityFrameworkEntitiesKeyTableBase);
            var duendeIdentityServerEntityFrameworkEntitiesKeyMappingBase = new TableMappingBase<ColumnMappingBase>(key, duendeIdentityServerEntityFrameworkEntitiesKeyTableBase, true);
            duendeIdentityServerEntityFrameworkEntitiesKeyTableBase.AddTypeMapping(duendeIdentityServerEntityFrameworkEntitiesKeyMappingBase, false);
            defaultTableMappings9.Add(duendeIdentityServerEntityFrameworkEntitiesKeyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase4, key.FindProperty("Id")!, duendeIdentityServerEntityFrameworkEntitiesKeyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)algorithmColumnBase, key.FindProperty("Algorithm")!, duendeIdentityServerEntityFrameworkEntitiesKeyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdColumnBase, key.FindProperty("Created")!, duendeIdentityServerEntityFrameworkEntitiesKeyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dataColumnBase0, key.FindProperty("Data")!, duendeIdentityServerEntityFrameworkEntitiesKeyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dataProtectedColumnBase, key.FindProperty("DataProtected")!, duendeIdentityServerEntityFrameworkEntitiesKeyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isX509CertificateColumnBase, key.FindProperty("IsX509Certificate")!, duendeIdentityServerEntityFrameworkEntitiesKeyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)useColumnBase, key.FindProperty("Use")!, duendeIdentityServerEntityFrameworkEntitiesKeyMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase, key.FindProperty("Version")!, duendeIdentityServerEntityFrameworkEntitiesKeyMappingBase);

            var tableMappings9 = new List<TableMapping>();
            key.SetRuntimeAnnotation("Relational:TableMappings", tableMappings9);
            var keysTable = new Table("Keys", null, relationalModel);
            var idColumn4 = new Column("Id", "TEXT", keysTable);
            keysTable.Columns.Add("Id", idColumn4);
            var algorithmColumn = new Column("Algorithm", "TEXT", keysTable);
            keysTable.Columns.Add("Algorithm", algorithmColumn);
            var createdColumn = new Column("Created", "TEXT", keysTable);
            keysTable.Columns.Add("Created", createdColumn);
            var dataColumn0 = new Column("Data", "TEXT", keysTable);
            keysTable.Columns.Add("Data", dataColumn0);
            var dataProtectedColumn = new Column("DataProtected", "INTEGER", keysTable);
            keysTable.Columns.Add("DataProtected", dataProtectedColumn);
            var isX509CertificateColumn = new Column("IsX509Certificate", "INTEGER", keysTable);
            keysTable.Columns.Add("IsX509Certificate", isX509CertificateColumn);
            var useColumn = new Column("Use", "TEXT", keysTable)
            {
                IsNullable = true
            };
            keysTable.Columns.Add("Use", useColumn);
            var versionColumn = new Column("Version", "INTEGER", keysTable);
            keysTable.Columns.Add("Version", versionColumn);
            var pK_Keys = new UniqueConstraint("PK_Keys", keysTable, new[] { idColumn4 });
            keysTable.PrimaryKey = pK_Keys;
            var pK_KeysUc = RelationalModel.GetKey(this,
                "Duende.IdentityServer.EntityFramework.Entities.Key",
                new[] { "Id" });
            pK_Keys.MappedKeys.Add(pK_KeysUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_KeysUc).Add(pK_Keys);
            keysTable.UniqueConstraints.Add("PK_Keys", pK_Keys);
            var iX_Keys_Use = new TableIndex(
            "IX_Keys_Use", keysTable, new[] { useColumn }, false);
            var iX_Keys_UseIx = RelationalModel.GetIndex(this,
                "Duende.IdentityServer.EntityFramework.Entities.Key",
                new[] { "Use" });
            iX_Keys_Use.MappedIndexes.Add(iX_Keys_UseIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Keys_UseIx).Add(iX_Keys_Use);
            keysTable.Indexes.Add("IX_Keys_Use", iX_Keys_Use);
            relationalModel.Tables.Add(("Keys", null), keysTable);
            var keysTableMapping = new TableMapping(key, keysTable, true);
            keysTable.AddTypeMapping(keysTableMapping, false);
            tableMappings9.Add(keysTableMapping);
            RelationalModel.CreateColumnMapping(idColumn4, key.FindProperty("Id")!, keysTableMapping);
            RelationalModel.CreateColumnMapping(algorithmColumn, key.FindProperty("Algorithm")!, keysTableMapping);
            RelationalModel.CreateColumnMapping(createdColumn, key.FindProperty("Created")!, keysTableMapping);
            RelationalModel.CreateColumnMapping(dataColumn0, key.FindProperty("Data")!, keysTableMapping);
            RelationalModel.CreateColumnMapping(dataProtectedColumn, key.FindProperty("DataProtected")!, keysTableMapping);
            RelationalModel.CreateColumnMapping(isX509CertificateColumn, key.FindProperty("IsX509Certificate")!, keysTableMapping);
            RelationalModel.CreateColumnMapping(useColumn, key.FindProperty("Use")!, keysTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn, key.FindProperty("Version")!, keysTableMapping);

            var persistedGrant = FindEntityType("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant")!;

            var defaultTableMappings10 = new List<TableMappingBase<ColumnMappingBase>>();
            persistedGrant.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings10);
            var duendeIdentityServerEntityFrameworkEntitiesPersistedGrantTableBase = new TableBase("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", null, relationalModel);
            var clientIdColumnBase0 = new ColumnBase<ColumnMappingBase>("ClientId", "TEXT", duendeIdentityServerEntityFrameworkEntitiesPersistedGrantTableBase);
            duendeIdentityServerEntityFrameworkEntitiesPersistedGrantTableBase.Columns.Add("ClientId", clientIdColumnBase0);
            var consumedTimeColumnBase = new ColumnBase<ColumnMappingBase>("ConsumedTime", "TEXT", duendeIdentityServerEntityFrameworkEntitiesPersistedGrantTableBase)
            {
                IsNullable = true
            };
            duendeIdentityServerEntityFrameworkEntitiesPersistedGrantTableBase.Columns.Add("ConsumedTime", consumedTimeColumnBase);
            var creationTimeColumnBase0 = new ColumnBase<ColumnMappingBase>("CreationTime", "TEXT", duendeIdentityServerEntityFrameworkEntitiesPersistedGrantTableBase);
            duendeIdentityServerEntityFrameworkEntitiesPersistedGrantTableBase.Columns.Add("CreationTime", creationTimeColumnBase0);
            var dataColumnBase1 = new ColumnBase<ColumnMappingBase>("Data", "TEXT", duendeIdentityServerEntityFrameworkEntitiesPersistedGrantTableBase);
            duendeIdentityServerEntityFrameworkEntitiesPersistedGrantTableBase.Columns.Add("Data", dataColumnBase1);
            var descriptionColumnBase1 = new ColumnBase<ColumnMappingBase>("Description", "TEXT", duendeIdentityServerEntityFrameworkEntitiesPersistedGrantTableBase)
            {
                IsNullable = true
            };
            duendeIdentityServerEntityFrameworkEntitiesPersistedGrantTableBase.Columns.Add("Description", descriptionColumnBase1);
            var expirationColumnBase0 = new ColumnBase<ColumnMappingBase>("Expiration", "TEXT", duendeIdentityServerEntityFrameworkEntitiesPersistedGrantTableBase)
            {
                IsNullable = true
            };
            duendeIdentityServerEntityFrameworkEntitiesPersistedGrantTableBase.Columns.Add("Expiration", expirationColumnBase0);
            var keyColumnBase = new ColumnBase<ColumnMappingBase>("Key", "TEXT", duendeIdentityServerEntityFrameworkEntitiesPersistedGrantTableBase);
            duendeIdentityServerEntityFrameworkEntitiesPersistedGrantTableBase.Columns.Add("Key", keyColumnBase);
            var sessionIdColumnBase0 = new ColumnBase<ColumnMappingBase>("SessionId", "TEXT", duendeIdentityServerEntityFrameworkEntitiesPersistedGrantTableBase)
            {
                IsNullable = true
            };
            duendeIdentityServerEntityFrameworkEntitiesPersistedGrantTableBase.Columns.Add("SessionId", sessionIdColumnBase0);
            var subjectIdColumnBase0 = new ColumnBase<ColumnMappingBase>("SubjectId", "TEXT", duendeIdentityServerEntityFrameworkEntitiesPersistedGrantTableBase)
            {
                IsNullable = true
            };
            duendeIdentityServerEntityFrameworkEntitiesPersistedGrantTableBase.Columns.Add("SubjectId", subjectIdColumnBase0);
            var typeColumnBase = new ColumnBase<ColumnMappingBase>("Type", "TEXT", duendeIdentityServerEntityFrameworkEntitiesPersistedGrantTableBase);
            duendeIdentityServerEntityFrameworkEntitiesPersistedGrantTableBase.Columns.Add("Type", typeColumnBase);
            relationalModel.DefaultTables.Add("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", duendeIdentityServerEntityFrameworkEntitiesPersistedGrantTableBase);
            var duendeIdentityServerEntityFrameworkEntitiesPersistedGrantMappingBase = new TableMappingBase<ColumnMappingBase>(persistedGrant, duendeIdentityServerEntityFrameworkEntitiesPersistedGrantTableBase, true);
            duendeIdentityServerEntityFrameworkEntitiesPersistedGrantTableBase.AddTypeMapping(duendeIdentityServerEntityFrameworkEntitiesPersistedGrantMappingBase, false);
            defaultTableMappings10.Add(duendeIdentityServerEntityFrameworkEntitiesPersistedGrantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)keyColumnBase, persistedGrant.FindProperty("Key")!, duendeIdentityServerEntityFrameworkEntitiesPersistedGrantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)clientIdColumnBase0, persistedGrant.FindProperty("ClientId")!, duendeIdentityServerEntityFrameworkEntitiesPersistedGrantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)consumedTimeColumnBase, persistedGrant.FindProperty("ConsumedTime")!, duendeIdentityServerEntityFrameworkEntitiesPersistedGrantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)creationTimeColumnBase0, persistedGrant.FindProperty("CreationTime")!, duendeIdentityServerEntityFrameworkEntitiesPersistedGrantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dataColumnBase1, persistedGrant.FindProperty("Data")!, duendeIdentityServerEntityFrameworkEntitiesPersistedGrantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase1, persistedGrant.FindProperty("Description")!, duendeIdentityServerEntityFrameworkEntitiesPersistedGrantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)expirationColumnBase0, persistedGrant.FindProperty("Expiration")!, duendeIdentityServerEntityFrameworkEntitiesPersistedGrantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sessionIdColumnBase0, persistedGrant.FindProperty("SessionId")!, duendeIdentityServerEntityFrameworkEntitiesPersistedGrantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)subjectIdColumnBase0, persistedGrant.FindProperty("SubjectId")!, duendeIdentityServerEntityFrameworkEntitiesPersistedGrantMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase, persistedGrant.FindProperty("Type")!, duendeIdentityServerEntityFrameworkEntitiesPersistedGrantMappingBase);

            var tableMappings10 = new List<TableMapping>();
            persistedGrant.SetRuntimeAnnotation("Relational:TableMappings", tableMappings10);
            var persistedGrantsTable = new Table("PersistedGrants", null, relationalModel);
            var keyColumn = new Column("Key", "TEXT", persistedGrantsTable);
            persistedGrantsTable.Columns.Add("Key", keyColumn);
            var clientIdColumn0 = new Column("ClientId", "TEXT", persistedGrantsTable);
            persistedGrantsTable.Columns.Add("ClientId", clientIdColumn0);
            var consumedTimeColumn = new Column("ConsumedTime", "TEXT", persistedGrantsTable)
            {
                IsNullable = true
            };
            persistedGrantsTable.Columns.Add("ConsumedTime", consumedTimeColumn);
            var creationTimeColumn0 = new Column("CreationTime", "TEXT", persistedGrantsTable);
            persistedGrantsTable.Columns.Add("CreationTime", creationTimeColumn0);
            var dataColumn1 = new Column("Data", "TEXT", persistedGrantsTable);
            persistedGrantsTable.Columns.Add("Data", dataColumn1);
            var descriptionColumn1 = new Column("Description", "TEXT", persistedGrantsTable)
            {
                IsNullable = true
            };
            persistedGrantsTable.Columns.Add("Description", descriptionColumn1);
            var expirationColumn0 = new Column("Expiration", "TEXT", persistedGrantsTable)
            {
                IsNullable = true
            };
            persistedGrantsTable.Columns.Add("Expiration", expirationColumn0);
            var sessionIdColumn0 = new Column("SessionId", "TEXT", persistedGrantsTable)
            {
                IsNullable = true
            };
            persistedGrantsTable.Columns.Add("SessionId", sessionIdColumn0);
            var subjectIdColumn0 = new Column("SubjectId", "TEXT", persistedGrantsTable)
            {
                IsNullable = true
            };
            persistedGrantsTable.Columns.Add("SubjectId", subjectIdColumn0);
            var typeColumn = new Column("Type", "TEXT", persistedGrantsTable);
            persistedGrantsTable.Columns.Add("Type", typeColumn);
            var pK_PersistedGrants = new UniqueConstraint("PK_PersistedGrants", persistedGrantsTable, new[] { keyColumn });
            persistedGrantsTable.PrimaryKey = pK_PersistedGrants;
            var pK_PersistedGrantsUc = RelationalModel.GetKey(this,
                "Duende.IdentityServer.EntityFramework.Entities.PersistedGrant",
                new[] { "Key" });
            pK_PersistedGrants.MappedKeys.Add(pK_PersistedGrantsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PersistedGrantsUc).Add(pK_PersistedGrants);
            persistedGrantsTable.UniqueConstraints.Add("PK_PersistedGrants", pK_PersistedGrants);
            var iX_PersistedGrants_ConsumedTime = new TableIndex(
            "IX_PersistedGrants_ConsumedTime", persistedGrantsTable, new[] { consumedTimeColumn }, false);
            var iX_PersistedGrants_ConsumedTimeIx = RelationalModel.GetIndex(this,
                "Duende.IdentityServer.EntityFramework.Entities.PersistedGrant",
                new[] { "ConsumedTime" });
            iX_PersistedGrants_ConsumedTime.MappedIndexes.Add(iX_PersistedGrants_ConsumedTimeIx);
            RelationalModel.GetOrCreateTableIndexes(iX_PersistedGrants_ConsumedTimeIx).Add(iX_PersistedGrants_ConsumedTime);
            persistedGrantsTable.Indexes.Add("IX_PersistedGrants_ConsumedTime", iX_PersistedGrants_ConsumedTime);
            var iX_PersistedGrants_Expiration = new TableIndex(
            "IX_PersistedGrants_Expiration", persistedGrantsTable, new[] { expirationColumn0 }, false);
            var iX_PersistedGrants_ExpirationIx = RelationalModel.GetIndex(this,
                "Duende.IdentityServer.EntityFramework.Entities.PersistedGrant",
                new[] { "Expiration" });
            iX_PersistedGrants_Expiration.MappedIndexes.Add(iX_PersistedGrants_ExpirationIx);
            RelationalModel.GetOrCreateTableIndexes(iX_PersistedGrants_ExpirationIx).Add(iX_PersistedGrants_Expiration);
            persistedGrantsTable.Indexes.Add("IX_PersistedGrants_Expiration", iX_PersistedGrants_Expiration);
            var iX_PersistedGrants_SubjectId_ClientId_Type = new TableIndex(
            "IX_PersistedGrants_SubjectId_ClientId_Type", persistedGrantsTable, new[] { subjectIdColumn0, clientIdColumn0, typeColumn }, false);
            var iX_PersistedGrants_SubjectId_ClientId_TypeIx = RelationalModel.GetIndex(this,
                "Duende.IdentityServer.EntityFramework.Entities.PersistedGrant",
                new[] { "SubjectId", "ClientId", "Type" });
            iX_PersistedGrants_SubjectId_ClientId_Type.MappedIndexes.Add(iX_PersistedGrants_SubjectId_ClientId_TypeIx);
            RelationalModel.GetOrCreateTableIndexes(iX_PersistedGrants_SubjectId_ClientId_TypeIx).Add(iX_PersistedGrants_SubjectId_ClientId_Type);
            persistedGrantsTable.Indexes.Add("IX_PersistedGrants_SubjectId_ClientId_Type", iX_PersistedGrants_SubjectId_ClientId_Type);
            var iX_PersistedGrants_SubjectId_SessionId_Type = new TableIndex(
            "IX_PersistedGrants_SubjectId_SessionId_Type", persistedGrantsTable, new[] { subjectIdColumn0, sessionIdColumn0, typeColumn }, false);
            var iX_PersistedGrants_SubjectId_SessionId_TypeIx = RelationalModel.GetIndex(this,
                "Duende.IdentityServer.EntityFramework.Entities.PersistedGrant",
                new[] { "SubjectId", "SessionId", "Type" });
            iX_PersistedGrants_SubjectId_SessionId_Type.MappedIndexes.Add(iX_PersistedGrants_SubjectId_SessionId_TypeIx);
            RelationalModel.GetOrCreateTableIndexes(iX_PersistedGrants_SubjectId_SessionId_TypeIx).Add(iX_PersistedGrants_SubjectId_SessionId_Type);
            persistedGrantsTable.Indexes.Add("IX_PersistedGrants_SubjectId_SessionId_Type", iX_PersistedGrants_SubjectId_SessionId_Type);
            relationalModel.Tables.Add(("PersistedGrants", null), persistedGrantsTable);
            var persistedGrantsTableMapping = new TableMapping(persistedGrant, persistedGrantsTable, true);
            persistedGrantsTable.AddTypeMapping(persistedGrantsTableMapping, false);
            tableMappings10.Add(persistedGrantsTableMapping);
            RelationalModel.CreateColumnMapping(keyColumn, persistedGrant.FindProperty("Key")!, persistedGrantsTableMapping);
            RelationalModel.CreateColumnMapping(clientIdColumn0, persistedGrant.FindProperty("ClientId")!, persistedGrantsTableMapping);
            RelationalModel.CreateColumnMapping(consumedTimeColumn, persistedGrant.FindProperty("ConsumedTime")!, persistedGrantsTableMapping);
            RelationalModel.CreateColumnMapping(creationTimeColumn0, persistedGrant.FindProperty("CreationTime")!, persistedGrantsTableMapping);
            RelationalModel.CreateColumnMapping(dataColumn1, persistedGrant.FindProperty("Data")!, persistedGrantsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn1, persistedGrant.FindProperty("Description")!, persistedGrantsTableMapping);
            RelationalModel.CreateColumnMapping(expirationColumn0, persistedGrant.FindProperty("Expiration")!, persistedGrantsTableMapping);
            RelationalModel.CreateColumnMapping(sessionIdColumn0, persistedGrant.FindProperty("SessionId")!, persistedGrantsTableMapping);
            RelationalModel.CreateColumnMapping(subjectIdColumn0, persistedGrant.FindProperty("SubjectId")!, persistedGrantsTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn, persistedGrant.FindProperty("Type")!, persistedGrantsTableMapping);

            var identityRole = FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole")!;

            var defaultTableMappings11 = new List<TableMappingBase<ColumnMappingBase>>();
            identityRole.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings11);
            var microsoftAspNetCoreIdentityIdentityRoleTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityRole", null, relationalModel);
            var concurrencyStampColumnBase0 = new ColumnBase<ColumnMappingBase>("ConcurrencyStamp", "TEXT", microsoftAspNetCoreIdentityIdentityRoleTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("ConcurrencyStamp", concurrencyStampColumnBase0);
            var idColumnBase5 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", microsoftAspNetCoreIdentityIdentityRoleTableBase);
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("Id", idColumnBase5);
            var nameColumnBase2 = new ColumnBase<ColumnMappingBase>("Name", "TEXT", microsoftAspNetCoreIdentityIdentityRoleTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("Name", nameColumnBase2);
            var normalizedNameColumnBase = new ColumnBase<ColumnMappingBase>("NormalizedName", "TEXT", microsoftAspNetCoreIdentityIdentityRoleTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleTableBase.Columns.Add("NormalizedName", normalizedNameColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityRole", microsoftAspNetCoreIdentityIdentityRoleTableBase);
            var microsoftAspNetCoreIdentityIdentityRoleMappingBase = new TableMappingBase<ColumnMappingBase>(identityRole, microsoftAspNetCoreIdentityIdentityRoleTableBase, true);
            microsoftAspNetCoreIdentityIdentityRoleTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityRoleMappingBase, false);
            defaultTableMappings11.Add(microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase5, identityRole.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)concurrencyStampColumnBase0, identityRole.FindProperty("ConcurrencyStamp")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase2, identityRole.FindProperty("Name")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)normalizedNameColumnBase, identityRole.FindProperty("NormalizedName")!, microsoftAspNetCoreIdentityIdentityRoleMappingBase);

            var tableMappings11 = new List<TableMapping>();
            identityRole.SetRuntimeAnnotation("Relational:TableMappings", tableMappings11);
            var aspNetRolesTable = new Table("AspNetRoles", null, relationalModel);
            var idColumn5 = new Column("Id", "TEXT", aspNetRolesTable);
            aspNetRolesTable.Columns.Add("Id", idColumn5);
            var concurrencyStampColumn0 = new Column("ConcurrencyStamp", "TEXT", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("ConcurrencyStamp", concurrencyStampColumn0);
            var nameColumn2 = new Column("Name", "TEXT", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("Name", nameColumn2);
            var normalizedNameColumn = new Column("NormalizedName", "TEXT", aspNetRolesTable)
            {
                IsNullable = true
            };
            aspNetRolesTable.Columns.Add("NormalizedName", normalizedNameColumn);
            var pK_AspNetRoles = new UniqueConstraint("PK_AspNetRoles", aspNetRolesTable, new[] { idColumn5 });
            aspNetRolesTable.PrimaryKey = pK_AspNetRoles;
            var pK_AspNetRolesUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "Id" });
            pK_AspNetRoles.MappedKeys.Add(pK_AspNetRolesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetRolesUc).Add(pK_AspNetRoles);
            aspNetRolesTable.UniqueConstraints.Add("PK_AspNetRoles", pK_AspNetRoles);
            var roleNameIndex = new TableIndex(
            "RoleNameIndex", aspNetRolesTable, new[] { normalizedNameColumn }, true);
            var roleNameIndexIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "NormalizedName" });
            roleNameIndex.MappedIndexes.Add(roleNameIndexIx);
            RelationalModel.GetOrCreateTableIndexes(roleNameIndexIx).Add(roleNameIndex);
            aspNetRolesTable.Indexes.Add("RoleNameIndex", roleNameIndex);
            relationalModel.Tables.Add(("AspNetRoles", null), aspNetRolesTable);
            var aspNetRolesTableMapping = new TableMapping(identityRole, aspNetRolesTable, true);
            aspNetRolesTable.AddTypeMapping(aspNetRolesTableMapping, false);
            tableMappings11.Add(aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn5, identityRole.FindProperty("Id")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(concurrencyStampColumn0, identityRole.FindProperty("ConcurrencyStamp")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn2, identityRole.FindProperty("Name")!, aspNetRolesTableMapping);
            RelationalModel.CreateColumnMapping(normalizedNameColumn, identityRole.FindProperty("NormalizedName")!, aspNetRolesTableMapping);

            var identityRoleClaim = FindEntityType("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>")!;

            var defaultTableMappings12 = new List<TableMappingBase<ColumnMappingBase>>();
            identityRoleClaim.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings12);
            var microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", null, relationalModel);
            var claimTypeColumnBase = new ColumnBase<ColumnMappingBase>("ClaimType", "TEXT", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("ClaimType", claimTypeColumnBase);
            var claimValueColumnBase = new ColumnBase<ColumnMappingBase>("ClaimValue", "TEXT", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("ClaimValue", claimValueColumnBase);
            var idColumnBase6 = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("Id", idColumnBase6);
            var roleIdColumnBase = new ColumnBase<ColumnMappingBase>("RoleId", "TEXT", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.Columns.Add("RoleId", roleIdColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase);
            var microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityRoleClaim, microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityRoleClaimstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase, false);
            defaultTableMappings12.Add(microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase6, identityRoleClaim.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimTypeColumnBase, identityRoleClaim.FindProperty("ClaimType")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimValueColumnBase, identityRoleClaim.FindProperty("ClaimValue")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)roleIdColumnBase, identityRoleClaim.FindProperty("RoleId")!, microsoftAspNetCoreIdentityIdentityRoleClaimstringMappingBase);

            var tableMappings12 = new List<TableMapping>();
            identityRoleClaim.SetRuntimeAnnotation("Relational:TableMappings", tableMappings12);
            var aspNetRoleClaimsTable = new Table("AspNetRoleClaims", null, relationalModel);
            var idColumn6 = new Column("Id", "INTEGER", aspNetRoleClaimsTable);
            aspNetRoleClaimsTable.Columns.Add("Id", idColumn6);
            var claimTypeColumn = new Column("ClaimType", "TEXT", aspNetRoleClaimsTable)
            {
                IsNullable = true
            };
            aspNetRoleClaimsTable.Columns.Add("ClaimType", claimTypeColumn);
            var claimValueColumn = new Column("ClaimValue", "TEXT", aspNetRoleClaimsTable)
            {
                IsNullable = true
            };
            aspNetRoleClaimsTable.Columns.Add("ClaimValue", claimValueColumn);
            var roleIdColumn = new Column("RoleId", "TEXT", aspNetRoleClaimsTable);
            aspNetRoleClaimsTable.Columns.Add("RoleId", roleIdColumn);
            var pK_AspNetRoleClaims = new UniqueConstraint("PK_AspNetRoleClaims", aspNetRoleClaimsTable, new[] { idColumn6 });
            aspNetRoleClaimsTable.PrimaryKey = pK_AspNetRoleClaims;
            var pK_AspNetRoleClaimsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",
                new[] { "Id" });
            pK_AspNetRoleClaims.MappedKeys.Add(pK_AspNetRoleClaimsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetRoleClaimsUc).Add(pK_AspNetRoleClaims);
            aspNetRoleClaimsTable.UniqueConstraints.Add("PK_AspNetRoleClaims", pK_AspNetRoleClaims);
            var iX_AspNetRoleClaims_RoleId = new TableIndex(
            "IX_AspNetRoleClaims_RoleId", aspNetRoleClaimsTable, new[] { roleIdColumn }, false);
            var iX_AspNetRoleClaims_RoleIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",
                new[] { "RoleId" });
            iX_AspNetRoleClaims_RoleId.MappedIndexes.Add(iX_AspNetRoleClaims_RoleIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetRoleClaims_RoleIdIx).Add(iX_AspNetRoleClaims_RoleId);
            aspNetRoleClaimsTable.Indexes.Add("IX_AspNetRoleClaims_RoleId", iX_AspNetRoleClaims_RoleId);
            relationalModel.Tables.Add(("AspNetRoleClaims", null), aspNetRoleClaimsTable);
            var aspNetRoleClaimsTableMapping = new TableMapping(identityRoleClaim, aspNetRoleClaimsTable, true);
            aspNetRoleClaimsTable.AddTypeMapping(aspNetRoleClaimsTableMapping, false);
            tableMappings12.Add(aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn6, identityRoleClaim.FindProperty("Id")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimTypeColumn, identityRoleClaim.FindProperty("ClaimType")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimValueColumn, identityRoleClaim.FindProperty("ClaimValue")!, aspNetRoleClaimsTableMapping);
            RelationalModel.CreateColumnMapping(roleIdColumn, identityRoleClaim.FindProperty("RoleId")!, aspNetRoleClaimsTableMapping);

            var identityUserClaim = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>")!;

            var defaultTableMappings13 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserClaim.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings13);
            var microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", null, relationalModel);
            var claimTypeColumnBase0 = new ColumnBase<ColumnMappingBase>("ClaimType", "TEXT", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("ClaimType", claimTypeColumnBase0);
            var claimValueColumnBase0 = new ColumnBase<ColumnMappingBase>("ClaimValue", "TEXT", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("ClaimValue", claimValueColumnBase0);
            var idColumnBase7 = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("Id", idColumnBase7);
            var userIdColumnBase1 = new ColumnBase<ColumnMappingBase>("UserId", "TEXT", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.Columns.Add("UserId", userIdColumnBase1);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserClaim, microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserClaimstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase, false);
            defaultTableMappings13.Add(microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase7, identityUserClaim.FindProperty("Id")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimTypeColumnBase0, identityUserClaim.FindProperty("ClaimType")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)claimValueColumnBase0, identityUserClaim.FindProperty("ClaimValue")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase1, identityUserClaim.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserClaimstringMappingBase);

            var tableMappings13 = new List<TableMapping>();
            identityUserClaim.SetRuntimeAnnotation("Relational:TableMappings", tableMappings13);
            var aspNetUserClaimsTable = new Table("AspNetUserClaims", null, relationalModel);
            var idColumn7 = new Column("Id", "INTEGER", aspNetUserClaimsTable);
            aspNetUserClaimsTable.Columns.Add("Id", idColumn7);
            var claimTypeColumn0 = new Column("ClaimType", "TEXT", aspNetUserClaimsTable)
            {
                IsNullable = true
            };
            aspNetUserClaimsTable.Columns.Add("ClaimType", claimTypeColumn0);
            var claimValueColumn0 = new Column("ClaimValue", "TEXT", aspNetUserClaimsTable)
            {
                IsNullable = true
            };
            aspNetUserClaimsTable.Columns.Add("ClaimValue", claimValueColumn0);
            var userIdColumn1 = new Column("UserId", "TEXT", aspNetUserClaimsTable);
            aspNetUserClaimsTable.Columns.Add("UserId", userIdColumn1);
            var pK_AspNetUserClaims = new UniqueConstraint("PK_AspNetUserClaims", aspNetUserClaimsTable, new[] { idColumn7 });
            aspNetUserClaimsTable.PrimaryKey = pK_AspNetUserClaims;
            var pK_AspNetUserClaimsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",
                new[] { "Id" });
            pK_AspNetUserClaims.MappedKeys.Add(pK_AspNetUserClaimsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserClaimsUc).Add(pK_AspNetUserClaims);
            aspNetUserClaimsTable.UniqueConstraints.Add("PK_AspNetUserClaims", pK_AspNetUserClaims);
            var iX_AspNetUserClaims_UserId = new TableIndex(
            "IX_AspNetUserClaims_UserId", aspNetUserClaimsTable, new[] { userIdColumn1 }, false);
            var iX_AspNetUserClaims_UserIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",
                new[] { "UserId" });
            iX_AspNetUserClaims_UserId.MappedIndexes.Add(iX_AspNetUserClaims_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetUserClaims_UserIdIx).Add(iX_AspNetUserClaims_UserId);
            aspNetUserClaimsTable.Indexes.Add("IX_AspNetUserClaims_UserId", iX_AspNetUserClaims_UserId);
            relationalModel.Tables.Add(("AspNetUserClaims", null), aspNetUserClaimsTable);
            var aspNetUserClaimsTableMapping = new TableMapping(identityUserClaim, aspNetUserClaimsTable, true);
            aspNetUserClaimsTable.AddTypeMapping(aspNetUserClaimsTableMapping, false);
            tableMappings13.Add(aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn7, identityUserClaim.FindProperty("Id")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimTypeColumn0, identityUserClaim.FindProperty("ClaimType")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(claimValueColumn0, identityUserClaim.FindProperty("ClaimValue")!, aspNetUserClaimsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn1, identityUserClaim.FindProperty("UserId")!, aspNetUserClaimsTableMapping);

            var identityUserLogin = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>")!;

            var defaultTableMappings14 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserLogin.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings14);
            var microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", null, relationalModel);
            var loginProviderColumnBase = new ColumnBase<ColumnMappingBase>("LoginProvider", "TEXT", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("LoginProvider", loginProviderColumnBase);
            var providerDisplayNameColumnBase = new ColumnBase<ColumnMappingBase>("ProviderDisplayName", "TEXT", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("ProviderDisplayName", providerDisplayNameColumnBase);
            var providerKeyColumnBase = new ColumnBase<ColumnMappingBase>("ProviderKey", "TEXT", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("ProviderKey", providerKeyColumnBase);
            var userIdColumnBase2 = new ColumnBase<ColumnMappingBase>("UserId", "TEXT", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.Columns.Add("UserId", userIdColumnBase2);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserLogin, microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserLoginstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase, false);
            defaultTableMappings14.Add(microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)loginProviderColumnBase, identityUserLogin.FindProperty("LoginProvider")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)providerKeyColumnBase, identityUserLogin.FindProperty("ProviderKey")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)providerDisplayNameColumnBase, identityUserLogin.FindProperty("ProviderDisplayName")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase2, identityUserLogin.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserLoginstringMappingBase);

            var tableMappings14 = new List<TableMapping>();
            identityUserLogin.SetRuntimeAnnotation("Relational:TableMappings", tableMappings14);
            var aspNetUserLoginsTable = new Table("AspNetUserLogins", null, relationalModel);
            var loginProviderColumn = new Column("LoginProvider", "TEXT", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("LoginProvider", loginProviderColumn);
            var providerKeyColumn = new Column("ProviderKey", "TEXT", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("ProviderKey", providerKeyColumn);
            var providerDisplayNameColumn = new Column("ProviderDisplayName", "TEXT", aspNetUserLoginsTable)
            {
                IsNullable = true
            };
            aspNetUserLoginsTable.Columns.Add("ProviderDisplayName", providerDisplayNameColumn);
            var userIdColumn2 = new Column("UserId", "TEXT", aspNetUserLoginsTable);
            aspNetUserLoginsTable.Columns.Add("UserId", userIdColumn2);
            var pK_AspNetUserLogins = new UniqueConstraint("PK_AspNetUserLogins", aspNetUserLoginsTable, new[] { loginProviderColumn, providerKeyColumn });
            aspNetUserLoginsTable.PrimaryKey = pK_AspNetUserLogins;
            var pK_AspNetUserLoginsUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",
                new[] { "LoginProvider", "ProviderKey" });
            pK_AspNetUserLogins.MappedKeys.Add(pK_AspNetUserLoginsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserLoginsUc).Add(pK_AspNetUserLogins);
            aspNetUserLoginsTable.UniqueConstraints.Add("PK_AspNetUserLogins", pK_AspNetUserLogins);
            var iX_AspNetUserLogins_UserId = new TableIndex(
            "IX_AspNetUserLogins_UserId", aspNetUserLoginsTable, new[] { userIdColumn2 }, false);
            var iX_AspNetUserLogins_UserIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",
                new[] { "UserId" });
            iX_AspNetUserLogins_UserId.MappedIndexes.Add(iX_AspNetUserLogins_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetUserLogins_UserIdIx).Add(iX_AspNetUserLogins_UserId);
            aspNetUserLoginsTable.Indexes.Add("IX_AspNetUserLogins_UserId", iX_AspNetUserLogins_UserId);
            relationalModel.Tables.Add(("AspNetUserLogins", null), aspNetUserLoginsTable);
            var aspNetUserLoginsTableMapping = new TableMapping(identityUserLogin, aspNetUserLoginsTable, true);
            aspNetUserLoginsTable.AddTypeMapping(aspNetUserLoginsTableMapping, false);
            tableMappings14.Add(aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(loginProviderColumn, identityUserLogin.FindProperty("LoginProvider")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(providerKeyColumn, identityUserLogin.FindProperty("ProviderKey")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(providerDisplayNameColumn, identityUserLogin.FindProperty("ProviderDisplayName")!, aspNetUserLoginsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn2, identityUserLogin.FindProperty("UserId")!, aspNetUserLoginsTableMapping);

            var identityUserRole = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>")!;

            var defaultTableMappings15 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserRole.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings15);
            var microsoftAspNetCoreIdentityIdentityUserRolestringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", null, relationalModel);
            var roleIdColumnBase0 = new ColumnBase<ColumnMappingBase>("RoleId", "TEXT", microsoftAspNetCoreIdentityIdentityUserRolestringTableBase);
            microsoftAspNetCoreIdentityIdentityUserRolestringTableBase.Columns.Add("RoleId", roleIdColumnBase0);
            var userIdColumnBase3 = new ColumnBase<ColumnMappingBase>("UserId", "TEXT", microsoftAspNetCoreIdentityIdentityUserRolestringTableBase);
            microsoftAspNetCoreIdentityIdentityUserRolestringTableBase.Columns.Add("UserId", userIdColumnBase3);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", microsoftAspNetCoreIdentityIdentityUserRolestringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserRole, microsoftAspNetCoreIdentityIdentityUserRolestringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserRolestringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase, false);
            defaultTableMappings15.Add(microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)roleIdColumnBase0, identityUserRole.FindProperty("RoleId")!, microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase3, identityUserRole.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserRolestringMappingBase);

            var tableMappings15 = new List<TableMapping>();
            identityUserRole.SetRuntimeAnnotation("Relational:TableMappings", tableMappings15);
            var aspNetUserRolesTable = new Table("AspNetUserRoles", null, relationalModel);
            var userIdColumn3 = new Column("UserId", "TEXT", aspNetUserRolesTable);
            aspNetUserRolesTable.Columns.Add("UserId", userIdColumn3);
            var roleIdColumn0 = new Column("RoleId", "TEXT", aspNetUserRolesTable);
            aspNetUserRolesTable.Columns.Add("RoleId", roleIdColumn0);
            var pK_AspNetUserRoles = new UniqueConstraint("PK_AspNetUserRoles", aspNetUserRolesTable, new[] { userIdColumn3, roleIdColumn0 });
            aspNetUserRolesTable.PrimaryKey = pK_AspNetUserRoles;
            var pK_AspNetUserRolesUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "UserId", "RoleId" });
            pK_AspNetUserRoles.MappedKeys.Add(pK_AspNetUserRolesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserRolesUc).Add(pK_AspNetUserRoles);
            aspNetUserRolesTable.UniqueConstraints.Add("PK_AspNetUserRoles", pK_AspNetUserRoles);
            var iX_AspNetUserRoles_RoleId = new TableIndex(
            "IX_AspNetUserRoles_RoleId", aspNetUserRolesTable, new[] { roleIdColumn0 }, false);
            var iX_AspNetUserRoles_RoleIdIx = RelationalModel.GetIndex(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "RoleId" });
            iX_AspNetUserRoles_RoleId.MappedIndexes.Add(iX_AspNetUserRoles_RoleIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AspNetUserRoles_RoleIdIx).Add(iX_AspNetUserRoles_RoleId);
            aspNetUserRolesTable.Indexes.Add("IX_AspNetUserRoles_RoleId", iX_AspNetUserRoles_RoleId);
            relationalModel.Tables.Add(("AspNetUserRoles", null), aspNetUserRolesTable);
            var aspNetUserRolesTableMapping = new TableMapping(identityUserRole, aspNetUserRolesTable, true);
            aspNetUserRolesTable.AddTypeMapping(aspNetUserRolesTableMapping, false);
            tableMappings15.Add(aspNetUserRolesTableMapping);
            RelationalModel.CreateColumnMapping(roleIdColumn0, identityUserRole.FindProperty("RoleId")!, aspNetUserRolesTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn3, identityUserRole.FindProperty("UserId")!, aspNetUserRolesTableMapping);

            var identityUserToken = FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserToken<string>")!;

            var defaultTableMappings16 = new List<TableMappingBase<ColumnMappingBase>>();
            identityUserToken.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings16);
            var microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase = new TableBase("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", null, relationalModel);
            var loginProviderColumnBase0 = new ColumnBase<ColumnMappingBase>("LoginProvider", "TEXT", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("LoginProvider", loginProviderColumnBase0);
            var nameColumnBase3 = new ColumnBase<ColumnMappingBase>("Name", "TEXT", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("Name", nameColumnBase3);
            var userIdColumnBase4 = new ColumnBase<ColumnMappingBase>("UserId", "TEXT", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("UserId", userIdColumnBase4);
            var valueColumnBase = new ColumnBase<ColumnMappingBase>("Value", "TEXT", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase)
            {
                IsNullable = true
            };
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.Columns.Add("Value", valueColumnBase);
            relationalModel.DefaultTables.Add("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase);
            var microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase = new TableMappingBase<ColumnMappingBase>(identityUserToken, microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase, true);
            microsoftAspNetCoreIdentityIdentityUserTokenstringTableBase.AddTypeMapping(microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase, false);
            defaultTableMappings16.Add(microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)loginProviderColumnBase0, identityUserToken.FindProperty("LoginProvider")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase3, identityUserToken.FindProperty("Name")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase4, identityUserToken.FindProperty("UserId")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valueColumnBase, identityUserToken.FindProperty("Value")!, microsoftAspNetCoreIdentityIdentityUserTokenstringMappingBase);

            var tableMappings16 = new List<TableMapping>();
            identityUserToken.SetRuntimeAnnotation("Relational:TableMappings", tableMappings16);
            var aspNetUserTokensTable = new Table("AspNetUserTokens", null, relationalModel);
            var userIdColumn4 = new Column("UserId", "TEXT", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("UserId", userIdColumn4);
            var loginProviderColumn0 = new Column("LoginProvider", "TEXT", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("LoginProvider", loginProviderColumn0);
            var nameColumn3 = new Column("Name", "TEXT", aspNetUserTokensTable);
            aspNetUserTokensTable.Columns.Add("Name", nameColumn3);
            var valueColumn = new Column("Value", "TEXT", aspNetUserTokensTable)
            {
                IsNullable = true
            };
            aspNetUserTokensTable.Columns.Add("Value", valueColumn);
            var pK_AspNetUserTokens = new UniqueConstraint("PK_AspNetUserTokens", aspNetUserTokensTable, new[] { userIdColumn4, loginProviderColumn0, nameColumn3 });
            aspNetUserTokensTable.PrimaryKey = pK_AspNetUserTokens;
            var pK_AspNetUserTokensUc = RelationalModel.GetKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserToken<string>",
                new[] { "UserId", "LoginProvider", "Name" });
            pK_AspNetUserTokens.MappedKeys.Add(pK_AspNetUserTokensUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AspNetUserTokensUc).Add(pK_AspNetUserTokens);
            aspNetUserTokensTable.UniqueConstraints.Add("PK_AspNetUserTokens", pK_AspNetUserTokens);
            relationalModel.Tables.Add(("AspNetUserTokens", null), aspNetUserTokensTable);
            var aspNetUserTokensTableMapping = new TableMapping(identityUserToken, aspNetUserTokensTable, true);
            aspNetUserTokensTable.AddTypeMapping(aspNetUserTokensTableMapping, false);
            tableMappings16.Add(aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(loginProviderColumn0, identityUserToken.FindProperty("LoginProvider")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn3, identityUserToken.FindProperty("Name")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn4, identityUserToken.FindProperty("UserId")!, aspNetUserTokensTableMapping);
            RelationalModel.CreateColumnMapping(valueColumn, identityUserToken.FindProperty("Value")!, aspNetUserTokensTableMapping);
            var fK_AspNetRoleClaims_AspNetRoles_RoleId = new ForeignKeyConstraint(
                "FK_AspNetRoleClaims_AspNetRoles_RoleId", aspNetRoleClaimsTable, aspNetRolesTable,
                new[] { roleIdColumn },
                aspNetRolesTable.FindUniqueConstraint("PK_AspNetRoles")!, ReferentialAction.Cascade);
            var fK_AspNetRoleClaims_AspNetRoles_RoleIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>",
                new[] { "RoleId" },
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "Id" });
            fK_AspNetRoleClaims_AspNetRoles_RoleId.MappedForeignKeys.Add(fK_AspNetRoleClaims_AspNetRoles_RoleIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetRoleClaims_AspNetRoles_RoleIdFk).Add(fK_AspNetRoleClaims_AspNetRoles_RoleId);
            aspNetRoleClaimsTable.ForeignKeyConstraints.Add(fK_AspNetRoleClaims_AspNetRoles_RoleId);
            aspNetRolesTable.ReferencingForeignKeyConstraints.Add(fK_AspNetRoleClaims_AspNetRoles_RoleId);
            var fK_AspNetUserClaims_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserClaims_AspNetUsers_UserId", aspNetUserClaimsTable, aspNetUsersTable,
                new[] { userIdColumn1 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_AspNetUserClaims_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserClaim<string>",
                new[] { "UserId" },
                "BlazingPizza.Server.PizzaStoreUser",
                new[] { "Id" });
            fK_AspNetUserClaims_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserClaims_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserClaims_AspNetUsers_UserIdFk).Add(fK_AspNetUserClaims_AspNetUsers_UserId);
            aspNetUserClaimsTable.ForeignKeyConstraints.Add(fK_AspNetUserClaims_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserClaims_AspNetUsers_UserId);
            var fK_AspNetUserLogins_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserLogins_AspNetUsers_UserId", aspNetUserLoginsTable, aspNetUsersTable,
                new[] { userIdColumn2 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_AspNetUserLogins_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserLogin<string>",
                new[] { "UserId" },
                "BlazingPizza.Server.PizzaStoreUser",
                new[] { "Id" });
            fK_AspNetUserLogins_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserLogins_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserLogins_AspNetUsers_UserIdFk).Add(fK_AspNetUserLogins_AspNetUsers_UserId);
            aspNetUserLoginsTable.ForeignKeyConstraints.Add(fK_AspNetUserLogins_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserLogins_AspNetUsers_UserId);
            var fK_AspNetUserRoles_AspNetRoles_RoleId = new ForeignKeyConstraint(
                "FK_AspNetUserRoles_AspNetRoles_RoleId", aspNetUserRolesTable, aspNetRolesTable,
                new[] { roleIdColumn0 },
                aspNetRolesTable.FindUniqueConstraint("PK_AspNetRoles")!, ReferentialAction.Cascade);
            var fK_AspNetUserRoles_AspNetRoles_RoleIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "RoleId" },
                "Microsoft.AspNetCore.Identity.IdentityRole",
                new[] { "Id" });
            fK_AspNetUserRoles_AspNetRoles_RoleId.MappedForeignKeys.Add(fK_AspNetUserRoles_AspNetRoles_RoleIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserRoles_AspNetRoles_RoleIdFk).Add(fK_AspNetUserRoles_AspNetRoles_RoleId);
            aspNetUserRolesTable.ForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetRoles_RoleId);
            aspNetRolesTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetRoles_RoleId);
            var fK_AspNetUserRoles_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserRoles_AspNetUsers_UserId", aspNetUserRolesTable, aspNetUsersTable,
                new[] { userIdColumn3 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_AspNetUserRoles_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserRole<string>",
                new[] { "UserId" },
                "BlazingPizza.Server.PizzaStoreUser",
                new[] { "Id" });
            fK_AspNetUserRoles_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserRoles_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserRoles_AspNetUsers_UserIdFk).Add(fK_AspNetUserRoles_AspNetUsers_UserId);
            aspNetUserRolesTable.ForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserRoles_AspNetUsers_UserId);
            var fK_AspNetUserTokens_AspNetUsers_UserId = new ForeignKeyConstraint(
                "FK_AspNetUserTokens_AspNetUsers_UserId", aspNetUserTokensTable, aspNetUsersTable,
                new[] { userIdColumn4 },
                aspNetUsersTable.FindUniqueConstraint("PK_AspNetUsers")!, ReferentialAction.Cascade);
            var fK_AspNetUserTokens_AspNetUsers_UserIdFk = RelationalModel.GetForeignKey(this,
                "Microsoft.AspNetCore.Identity.IdentityUserToken<string>",
                new[] { "UserId" },
                "BlazingPizza.Server.PizzaStoreUser",
                new[] { "Id" });
            fK_AspNetUserTokens_AspNetUsers_UserId.MappedForeignKeys.Add(fK_AspNetUserTokens_AspNetUsers_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AspNetUserTokens_AspNetUsers_UserIdFk).Add(fK_AspNetUserTokens_AspNetUsers_UserId);
            aspNetUserTokensTable.ForeignKeyConstraints.Add(fK_AspNetUserTokens_AspNetUsers_UserId);
            aspNetUsersTable.ReferencingForeignKeyConstraints.Add(fK_AspNetUserTokens_AspNetUsers_UserId);
            var fK_Orders_Address_DeliveryAddressId = new ForeignKeyConstraint(
                "FK_Orders_Address_DeliveryAddressId", ordersTable, addressTable,
                new[] { deliveryAddressIdColumn },
                addressTable.FindUniqueConstraint("PK_Address")!, ReferentialAction.Cascade);
            var fK_Orders_Address_DeliveryAddressIdFk = RelationalModel.GetForeignKey(this,
                "BlazingPizza.Order",
                new[] { "DeliveryAddressId" },
                "BlazingPizza.Address",
                new[] { "Id" });
            fK_Orders_Address_DeliveryAddressId.MappedForeignKeys.Add(fK_Orders_Address_DeliveryAddressIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Orders_Address_DeliveryAddressIdFk).Add(fK_Orders_Address_DeliveryAddressId);
            ordersTable.ForeignKeyConstraints.Add(fK_Orders_Address_DeliveryAddressId);
            addressTable.ReferencingForeignKeyConstraints.Add(fK_Orders_Address_DeliveryAddressId);
            var fK_Pizzas_Orders_OrderId = new ForeignKeyConstraint(
                "FK_Pizzas_Orders_OrderId", pizzasTable, ordersTable,
                new[] { orderIdColumn0 },
                ordersTable.FindUniqueConstraint("PK_Orders")!, ReferentialAction.Cascade);
            var fK_Pizzas_Orders_OrderIdFk = RelationalModel.GetForeignKey(this,
                "BlazingPizza.Pizza",
                new[] { "OrderId" },
                "BlazingPizza.Order",
                new[] { "OrderId" });
            fK_Pizzas_Orders_OrderId.MappedForeignKeys.Add(fK_Pizzas_Orders_OrderIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Pizzas_Orders_OrderIdFk).Add(fK_Pizzas_Orders_OrderId);
            pizzasTable.ForeignKeyConstraints.Add(fK_Pizzas_Orders_OrderId);
            ordersTable.ReferencingForeignKeyConstraints.Add(fK_Pizzas_Orders_OrderId);
            var fK_Pizzas_Specials_SpecialId = new ForeignKeyConstraint(
                "FK_Pizzas_Specials_SpecialId", pizzasTable, specialsTable,
                new[] { specialIdColumn },
                specialsTable.FindUniqueConstraint("PK_Specials")!, ReferentialAction.Cascade);
            var fK_Pizzas_Specials_SpecialIdFk = RelationalModel.GetForeignKey(this,
                "BlazingPizza.Pizza",
                new[] { "SpecialId" },
                "BlazingPizza.PizzaSpecial",
                new[] { "Id" });
            fK_Pizzas_Specials_SpecialId.MappedForeignKeys.Add(fK_Pizzas_Specials_SpecialIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Pizzas_Specials_SpecialIdFk).Add(fK_Pizzas_Specials_SpecialId);
            pizzasTable.ForeignKeyConstraints.Add(fK_Pizzas_Specials_SpecialId);
            specialsTable.ReferencingForeignKeyConstraints.Add(fK_Pizzas_Specials_SpecialId);
            var fK_PizzaTopping_Pizzas_PizzaId = new ForeignKeyConstraint(
                "FK_PizzaTopping_Pizzas_PizzaId", pizzaToppingTable, pizzasTable,
                new[] { pizzaIdColumn },
                pizzasTable.FindUniqueConstraint("PK_Pizzas")!, ReferentialAction.Cascade);
            var fK_PizzaTopping_Pizzas_PizzaIdFk = RelationalModel.GetForeignKey(this,
                "BlazingPizza.PizzaTopping",
                new[] { "PizzaId" },
                "BlazingPizza.Pizza",
                new[] { "Id" });
            fK_PizzaTopping_Pizzas_PizzaId.MappedForeignKeys.Add(fK_PizzaTopping_Pizzas_PizzaIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_PizzaTopping_Pizzas_PizzaIdFk).Add(fK_PizzaTopping_Pizzas_PizzaId);
            pizzaToppingTable.ForeignKeyConstraints.Add(fK_PizzaTopping_Pizzas_PizzaId);
            pizzasTable.ReferencingForeignKeyConstraints.Add(fK_PizzaTopping_Pizzas_PizzaId);
            var fK_PizzaTopping_Toppings_ToppingId = new ForeignKeyConstraint(
                "FK_PizzaTopping_Toppings_ToppingId", pizzaToppingTable, toppingsTable,
                new[] { toppingIdColumn },
                toppingsTable.FindUniqueConstraint("PK_Toppings")!, ReferentialAction.Cascade);
            var fK_PizzaTopping_Toppings_ToppingIdFk = RelationalModel.GetForeignKey(this,
                "BlazingPizza.PizzaTopping",
                new[] { "ToppingId" },
                "BlazingPizza.Topping",
                new[] { "Id" });
            fK_PizzaTopping_Toppings_ToppingId.MappedForeignKeys.Add(fK_PizzaTopping_Toppings_ToppingIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_PizzaTopping_Toppings_ToppingIdFk).Add(fK_PizzaTopping_Toppings_ToppingId);
            pizzaToppingTable.ForeignKeyConstraints.Add(fK_PizzaTopping_Toppings_ToppingId);
            toppingsTable.ReferencingForeignKeyConstraints.Add(fK_PizzaTopping_Toppings_ToppingId);
            return relationalModel.MakeReadOnly();
        }
    }
}
